'EqualOpp_Work',
'EqualOpp_StateWork',
'EqualOpp_HeadWork',
'EqualOpp_Business',
'EqualOpp_Politics',
'EqualOpp_Education',
'EqualOpp_StartUp',
'EqualOpp_Pay',
'EqualOpp_Benefit')
for (c in clean5s) {
D[[c]][D[[c]]==5] = NA
}
View(D)
cleanTrue = c('ChildSchool_State',
'ChildSchool_Immersion',
'ChildSchool_Mixed',
'ChildSchool_Bilingual',
'ChildSchool_Russian',
'ChildSchool_Foreign',
'ChildSchool_None',
'ChildSchool_NotSure')
for (c in clean5s) {
D[[c]][is.na(D[[c]])] = FALSE
D[[c]][!is.na(D[[c]])] = TRUE
}
View(D)
cleanTrue = c('ChildSchool_State',
'ChildSchool_Immersion',
'ChildSchool_Mixed',
'ChildSchool_Bilingual',
'ChildSchool_Russian',
'ChildSchool_Foreign',
'ChildSchool_None',
'ChildSchool_NotSure')
for (c in cleanTrue) {
D[[c]][is.na(D[[c]])] = FALSE
D[[c]][!is.na(D[[c]])] = TRUE
D[[c]] = as.logical(D[[c]])
}
View(D)
source.with.encoding('~/GitHub/BSRS/preprocess.R', encoding='UTF-8')
source.with.encoding('~/GitHub/BSRS/preprocess.R', encoding='UTF-8')
source('~/GitHub/BSRS/preprocess.R')
View(D)
source('~/GitHub/BSRS/preprocess.R')
View(D)
source('~/GitHub/BSRS/preprocess.R')
View(D)
a=pbeta(seq(from=0,to=1,by=0.05),2,1)
plot(a)
y=seq(from=0,to=1,by=0.05)
plot(y,a)
pbeta(0.75,2,1)-pbeta(0.5,2,1)
qbeta(0.5,2,1)
pbeta(0.7,2,1)
install.packages("gdata")
library(gdata)
# Get important libraries
library(ggplot2)     # Grammar of Graphics
library(gcookbook)
library(gdata)
require
?require
df = read.xls ("Responses.xlsx"), sheet = 1, header = TRUE)
df = read.xls ("Responses.xlsx", sheet = 1, header = TRUE)
View(df)
df = read.xls ("Responses.xlsx", sheet = 1, header = TRUE)
View(df)
names(df)
df = read.xls ("Responses.xlsx", sheet = 1, header = F)
View(df)
colnames(df) <- Q
Q <- SurveyQuestions()
colnames(df) <- Q
'Language_Other_Name',
source('~/Projects/BSRS/SurveyQuestions.R', echo=TRUE)
source('~/Projects/BSRS/SurveyQuestions.R', echo=TRUE)
Q <- SurveyQuestions()
colnames(df) <- Q
View(df)
Q
D <- read.xls("Responses.xlsx", sheet = 1, header = F)
colnames(D) <- Q
View(D)
clear(df)
remove(df)
# Get all the labels for the columns
Q <- SurveyQuestions()
# Read table
D <- read.xls("Responses.xlsx", sheet = 1, header = F)
colnames(D) <- Q
View(D)
D[1:14,]
D[1:14, ] <- []
D[1:14, ] <- NA
View(D)
D <- D[-c(1:14),]
View(D)
temp <- D$Satisfaction
temp <- D[['Satisfaction']], ]
temp <- D[['Satisfaction'], ]
temp <- D['Satisfaction', ]
View(temp)
temp <- D[, 'Satisfaction']
temp <- D[, 'Satisfaction']
temp <- D[[, 'Satisfaction']]
temp <- D[['Satisfaction']]
temp <- data.frame(D$Satisfaction)
View(temp)
D[['Satisfaction']]
?read.xls
D <- data.frame(D)
D[['Satisfaction']]
class(D$Satisfaction)
D$Satisfaction
D <- read.xls("Responses.xlsx", sheet = 1, header = FALSE, stringsAsFactors=FALSE)
colnames(D) <- Q
D <- data.frame(D)
# D <- read.delim(file='Responses.xlsx', header=FALSE, col.names=Q, stringsAsFactors=FALSE)
### DATA CLEAN ###
# Remove useless rows
D <- D[-c(1:14),]
temp <- data.frame(D$Satisfaction)
D$Satisfaction
View(D)
View(D)
show(D)
summarise(D)
colnames(D)
class(D$count)
source('SurveyQuestions.R')
remove(D)
D <- read.xls("Responses.xlsx", sheet = 1, header = FALSE, stringsAsFactors=FALSE)
colnames(D) <- surveyQuestions
D <- data.frame(D)
# D <- read.delim(file='Responses.xlsx', header=FALSE, col.names=surveyQuestions, stringsAsFactors=FALSE)
View(D)
# Remove useless rows
D <- D[-c(1:14),]
View(D)
class(D$Nat_TimeSpent)
# Convert to integers
for (q in toInteger) {
D[[q]] = as.integer(D[[q]])
}
View(D)
# Satisfaction 11s to NAs
D[['Satisfaction']][D[['Satisfaction']]==11] = NA
# Clean 5s
for (q in clean5s) {
D[[q]][D[[q]]==5] = NA
}
View(D)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
View(D)
D[['Income_Future']][D[['Income_Future']]==6] = NA
class (D$Country)
D$Country <- as.factor(D$Country)
class (D$Country)
D$Country
unclass (D$Country)
D$Gender <- as.factor(D$Gender)
D$Gender
levels (D$Gender) <- c("male", "female")
D$Gender
View(D)
D$FamilyStatus <- as.factor(D$FamilyStatus)
levels (D$FamilyStatus) <- c("single", "married", "cohabiting", "dating", "divorced", "widowed")
View(D)
# Reason For Moving 4s to NAs
D[['ReasonForMoving']][D[['ReasonForMoving']]==4] = NA
D$ReasonForMoving <- as.factor(D$ReasonForMoving)
levels (D$ReasonForMoving) <- c("work", "study", "family")
View(D)
D$NativeLanguage <- as.factor(D$NativeLanguage)
levels(D$NativeLanguage) <- c("russian", "state")
View(D)
levels(D$NativeLanguage)
levels(D$NativeLanguage) <- c("russian", "state", "other")
View(D)
D$Religion <- as.factor(D$Religion)
levels(D$Religion) <- c("orthodox", "catholic", "protestant", "lutheran", "islam", "buddhism/oriental", "hinduism", "atheism", "other")
View(D)
D$Education <- as.factor(D$Education)
levels(D$Education) <- c("basic", "vocational", "polytechnic", "school", "degree", "other")
View(D)
DOccupation
D$Occupation <- as.factor(D$Occupation)
levels(D$Occupation) <- c("employee", "employer", "entrepreneur", "pensioner (working)", "student (working)",
"pensioner (unemployed)", "student (unemployed)", "unemployed (no benefits)",
"unemployed (benefits)", "housewife", "other")
View(D)
View(D)
class(D)
class(D$)
sapply(D, class)
# Type of data in each column
D_class <- sapply(D, class)
# Get only quantitative columns
D_numeric <- sapply(D, is.numeric)
Dq <- D[, D_numeric]
Dq
View(Dq)
summary(Dq)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
summary(D)
D_qual <- sapply(D, is.character)
D_qual
Dc <- D[, D_qual]
View(Dc)
D[, 0]
D[, 1]
View(D_agree)
View(D)
mew = D[["ReasonForMoving"]][D[['ReasonForMoving_Other']]=='']
mew
D[["ReasonForMoving"]]
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA && D[['ReasonForMoving_Other']]=='']
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]=='']
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] == 4
D[["ReasonForMoving_Other"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!='']
D[["ReasonForMoving"]]
summary(D[['ReasonForMoving']])
D[["ReasonForMoving_Other"]]
D[['ReasonForMoving_Other']]!=''
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!='']
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] == 4
levels(D$ReasonForMoving) <- c("work", "study", "family", "other")
summary(D[['ReasonForMoving']])
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] == 4
summary(D[['ReasonForMoving']])
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] = 4
levels(D$ReasonForMoving) <- c("work", "study", "family", "other")
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] = 4
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!='']
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] = "other"
summary(D$ReasonForMoving)
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!='']
D$ReasonForMoving <- as.integer(D$ReasonForMoving)
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!='']
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] = 4
D$ReasonForMoving <- as.factor(D$ReasonForMoving)
levels(D$ReasonForMoving) <- c("work", "study", "family", "other")
summary(D$ReasonForMoving)
D$ReasonForMoving <- as.integer(D$ReasonForMoving)
D[["ReasonForMoving"]][D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''] = 4
summary(D[["ReasonForMoving"]])
[D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!='']
D[['ReasonForMoving']]==NA & D[['ReasonForMoving_Other']]!=''
is.na(D[['ReasonForMoving']]) & D[['ReasonForMoving_Other']]!=''
D[["ReasonForMoving"]][is.na(D[['ReasonForMoving']]) & D[['ReasonForMoving_Other']]!=''] = 4
D$ReasonForMoving <- as.factor(D$ReasonForMoving)
levels(D$ReasonForMoving) <- c("work", "study", "family", "other")
summary(D$ReasonForMoving)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
library(rjson)
toJSON(D)
Djson = toJSON(D)
write(Djson, '/Users/sasha/Desktop/BSRS.json')
write.csv(D, '/Users/sasha/Desktop/BSRS.csv')
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
View(D)
source('~/Projects/BSRS/nationalityStrings.R', echo=TRUE)
N
pmatch("рус", N)
pmatch("рус", N[1])
pmatch("рус", N[2])
pmatch("рус", N[3])
pmatch("рус", N[4])
pmatch("рус", N[5])
pmatch("рус", N[6])
pmatch("рус", N[7])
rus = vector()
# Lowercase every word
for (n in 1:length(N)) {
rus[n] = pmatch("рус", N[n])
}
rus
nationalities = c("рус", "эст", "фин", "укр", "бел", "инг", "карел", "татар", "армя")
nat = matrix()
# Lowercase every word
for (m in 1:length(nationalities)) {
for (n in 1:length(N)) {
nat[m,n] = pmatch(nationalities[m], N[n])
}
}
m
n
nat
m
n
nationalities = c("рус", "эст", "фин", "укр", "бел", "инг", "карел", "татар", "армя")
nat = matrix(data=NA,nrow=length(N),ncol=length(nationalities))
# Lowercase every word
for (m in 1:length(nationalities)) {
for (n in 1:length(N)) {
nat[n,m] = pmatch(nationalities[m], N[n])
}
}
nat
sum(nat)
sum(nat, 1)
sum(nat, 2)
rowsum(nat)
rowSums(nat)
rowSums(nat, na.rm = T)
N[1]
N[2]
N[3]
N[4]
N[5]
N[6]
N[7]
N[8]
pmatch(nationlaities[1], N[8])
pmatch(nationlities[1], N[8])
pmatch(nationalities[1], N[8])
N[8]
nationalities[1]
pmatch(N[8], nationalities[1])
pmatch("e", "pep")
grepl("e", "pep")
?grepl
nat = matrix(data=NA,nrow=length(N),ncol=length(nationalities))
# Lowercase every word
for (m in 1:length(nationalities)) {
for (n in 1:length(N)) {
nat[n,m] = grepl(nationalities[m], N[n])
}
}
rowSums(nat, na.rm = T)
N[8]
grepl
nat
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
source('~/Projects/BSRS/nationalityStrings.R', echo=TRUE)
nat
multi
multi == 0
find(multi == 0)
ind(multi == 0)
indx(multi == 0)
which(multi == 0)
N[5]
N[42]
N[51]
N[110]
N[112]
N[128]
N[132]
emptyNat = which(multi == 0)
for (e in emptyNat) {
print(N[e])
}
emptyNat = which(multi == 0)
for (e in 1:length(emptyNat)) {
print(N[emptyNat[e]])
}
emptyNat = which(multi == 0)
for (e in 1:length(emptyNat)) {
print(e + N[emptyNat[e]])
}
emptyNat = which(multi == 0)
for (e in 1:length(emptyNat)) {
print(str(e) + N[emptyNat[e]])
}
string(1)
str(1)
char(1)
emptyNat = which(multi == 0)
for (e in 1:length(emptyNat)) {
print(toString(e) + ": " + N[emptyNat[e]])
}
emptyNat = which(multi == 0)
for (e in 1:length(emptyNat)) {
print(paste(toString(e), ": ", N[emptyNat[e]]))
}
emptyNat = which(multi == 0)
for (e in 1:length(emptyNat)) {
print(paste(toString(emptyNat[e]), ": ", N[emptyNat[e]]))
}
# Print empty ones
emptyNat = which(natSum == 0)
for (e in 1:length(emptyNat)) {
cat(paste(toString(emptyNat[e]), ": ", N[emptyNat[e]]))
}
# Print empty ones
emptyNat = which(natSum == 0)
for (e in 1:length(emptyNat)) {
print(paste(toString(emptyNat[e]), ": ", N[emptyNat[e]]))
}
print("")
# Print multinationality
emptyNat = which(natSum > 1)
for (e in 1:length(emptyNat)) {
print(paste(toString(emptyNat[e]), ": ", N[emptyNat[e]]))
}
print("")
natSum = rowSums(nat, na.rm = T)
# Print empty ones
emptyNat = which(natSum == 0)
for (e in 1:length(emptyNat)) {
print(paste(toString(emptyNat[e]), ": ", N[emptyNat[e]]))
}
print("")
# Print multinationality
multiNat = which(natSum > 1)
for (e in 1:length(multiNat)) {
print(paste(toString(multiNat[e]), ": ", N[multiNat[e]]))
}
print("")
natSum = rowSums(nat, na.rm = T)
# Print empty ones
emptyNat = which(natSum == 0)
for (e in 1:length(emptyNat)) {
print(paste(toString(emptyNat[e]), ": ", N[emptyNat[e]]))
}
print(length(emptyNat))
# Print multinationality
multiNat = which(natSum > 1)
for (e in 1:length(multiNat)) {
print(paste(toString(multiNat[e]), ": ", N[multiNat[e]]))
}
print(length(multiNat))
# Print number of uninationality
uniNat = which(natSum == 1)
print(length(uniNat))
colnames(nat) = nationalities
nat
colSums(nat)
print(colSums(nat))
source('~/Projects/BSRS/nationalityStrings.R', echo=TRUE)
nationalities = c("русс", "эст", "фин", "коми", "инг", "карел", "укр", "бел", "татар", "армя", "сету",
"лат", "поль")
print(colSums(nat))
source('~/.active-rstudio-document', echo=TRUE)
source('~/Projects/BSRS/nationalityStrings.R', echo=TRUE)
byNationality("Nationality_Self")
byNationality("Nationality_Father")
byNationality("Nationality_Mother")
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
byNationality("Nationality_Self")
byNationality("Nationality_Father")
byNationality("Nationality_Mother")
?grouping
nationalities = c("русс", "эст", "фин", "коми", "инг", "карел", "сету",
"укр", "бел", "татар", "армя",  "лат", "поль")
stringGrouping("Nationality_Self", nationalities)
stringGrouping("Nationality_Father", nationalities)
stringGrouping("Nationality_Mother", nationalities)
source("stringGrouping.R")
nationalities = c("русс", "эст", "фин", "коми", "инг", "карел", "сету",
"укр", "бел", "татар", "армя",  "лат", "поль")
stringGrouping("Nationality_Self", nationalities)
stringGrouping("Nationality_Father", nationalities)
stringGrouping("Nationality_Mother", nationalities)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(D)
stringGrouping("PlaceBirth", countries)
countries = c("русс", "СССР", "эст", "фин",
"укр", "бел", "татар", "арме",  "лат", "лит", "поль",
"казах", "узбек")
stringGrouping("PlaceBirth", countries)
# Get important libraries
library(ggplot2)     # Grammar of Graphics
library(gcookbook)
library(gdata)
# Source functions for analysis
source("stringGrouping.R")
# Run data analysis step by step
source('SurveyQuestions.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
countries
tringGrouping("PlaceBirth", countries)
stringGrouping("PlaceBirth", countries)
countries = c("росс", "ссср", "эст", "фин",
"укр", "бел", "татар", "арме",  "лат", "лит", "поль",
"казах", "узбек")
stringGrouping("PlaceBirth", countries)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
surveyQuestions <- c('count',
D$Emigration_A <- do.call(paste, c(dat[c("Emigration_1", "Emigration_2")], sep = ""))
)
D$Emigration_A <- do.call(paste, c(dat[c("Emigration_1", "Emigration_2")], sep = ""))
D$Emigration_A <- do.call(paste, c(D[c("Emigration_1", "Emigration_2")], sep = ""))
View(D)
D$Emigration_A <- do.call(paste, c(D[c("Emigration_1", "Emigration_2")], sep = " "))
View(D)
stringGrouping("Emigration_A", countriesE)
# Emigration analysis
countriesE = c("росс", "эст", "фин",
"укр", "бел", "татар", "арме",  "лат", "лит", "поль",
"казах", "узбек", "таджи", "киргиз",
"герм", "австрия", "англ", "швец", "норв", "дания", "ирлан", "лихт", "люкс",
"швей", "чех", "словак", "болгар", "хорва",
"испа", "франц", "итал", "грецию", "португалия", "кипр","монако",
"австралия", "новая зеландия", "мальд", "сша", "канада", "индия", "тайланд", "япония")
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
languageEl
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
languages = c("эст", "выру",
"франц", "испа", "итал", "порт",
"укр", "поль", "армя", "татар", "болг", "бел", "чешс", "латы",
"киргиз", "узбек", "карель", "сету",
"кита", "корей", "венг", "датс" )
stringGrouping("Language_Other_Name", languages)
