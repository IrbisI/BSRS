# Improve visualisation
names(Dloc) <- as.vector(sapply(cutPrefix(names(Dloc)), humaniseString))
# Decision tree
tr <- rpart(Country ~ .,
data=Dloc, method="class"
)
print(summary(tr))
fancyRpartPlot(tr)
# Appraisal (random forest) --> distinguish finns & estonians
treeFactors <- c('Country', factorList)
Dloc <- D[, treeFactors]
Dloc <- na.omit(Dloc)
# Improve visualisation
names(Dloc) <- as.vector(sapply(cutPrefix(names(Dloc)), humaniseString))
# Decision tree
tr <- rpart(Country ~ .,
data=Dloc, method="class"
)
print(summary(tr))
fancyRpartPlot(tr)
treeFactors <- c('Country', factorList)
Dloc <- D[, treeFactors]
#Dloc <- na.omit(Dloc)
# Improve visualisation
names(Dloc) <- as.vector(sapply(cutPrefix(names(Dloc)), humaniseString))
# Decision tree
tr <- rpart(Country ~ .,
data=Dloc, method="class"
)
print(summary(tr))
fancyRpartPlot(tr)
decisionTree
?fancyRpartPlot
?dev.off
source('~/Projects/BSRS/analysisFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.com')
source('~/Projects/BSRS/analysisFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png')
source('~/Projects/BSRS/analysisFunctions.R', echo=TRUE)
# Appraisal (decision tree) --> distinguish finns & estonians
decisionTree(D, 'Country', factorList)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png')
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
# Appraisal (decision tree) --> distinguish finns & estonians
decisionTree(D, 'Country', factorList)
# Appraisal (decision tree) --> distinguish finns & estonians
decisionTree(D, 'Country', factorList, graphTitle="mewmewmew")
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
title(main=graphTitle, outer=TRUE)
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
decisionTree(D, 'Country', factorList, 'decTree__countryXappraisal.png', "Distinguish country by Appraisal ratings")
decisionTree(D, 'Country', factorList,
'decTree__countryXimportanceState.png',
"Distinguish country by Importance ratings")
factorList <- c('ImportanceState_NameFamily',
'ImportanceState_Citizenship',
'ImportanceState_Language',
'ImportanceState_Friends',
'ImportanceState_School',
'ImportanceState_Behaviour',
'ImportanceState_Other')
decisionTree(D, 'Country', factorList,
'decTree__countryXimportanceState.png',
"Distinguish country by Importance ratings")
corrgram(D_sub,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Appraisal")
D_sub <- D[, factorList]
# Correlation between overall satisfaction and subtypes
corrgram(D_sub,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Appraisal")
# Correlation between overall satisfaction and subtypes
corrgram(D_sub,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Importance State")
D_sub <- D[, factorList]
# Correlation between overall satisfaction and subtypes
corrgram(D_sub,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Importance State")
#### Agree ####
factorList <- c('Agree_FutureHope',
'Agree_NotRecognised',
'Agree_SecondClassCitizen',
'Agree_DefendInterests',
'Agree_LookFromAbove',
'Agree_NoInfluence')
D_sub <- D[, factorList]
# Correlation between overall satisfaction and subtypes
corrgram(D_sub,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Appraisal")
factorList <- c('ImportanceState_NameFamily',
'ImportanceState_Citizenship',
'ImportanceState_Language',
'ImportanceState_Friends',
'ImportanceState_School',
'ImportanceState_Behaviour',
'ImportanceState_Other')
D_sub <- D[, factorList]
# Correlation between overall satisfaction and subtypes
corrgram(D_sub,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Importance State")
factorList <- c('Agree_FutureHope',
'Agree_NotRecognised',
'Agree_SecondClassCitizen',
'Agree_DefendInterests',
'Agree_LookFromAbove',
'Agree_NoInfluence')
D_sub <- D[, factorList]
print("Dimensions before/after ignoring NAs")
print(dim(D_sub))
print(dim(na.omit(D_sub)))
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
fit <- princomp(na.omit(D_sub),
center = TRUE, scale = TRUE,
cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
?biplot
sat_Factors = c('Satisfaction_Work',
'Satisfaction_Safety',
'Satisfaction_Home',
'Satisfaction_Family',
'Satisfaction_Material',
'Satisfaction_Friends')
agr_Factors <- c('Agree_FutureHope',
'Agree_NotRecognised',
'Agree_SecondClassCitizen',
'Agree_DefendInterests',
'Agree_LookFromAbove',
'Agree_NoInfluence')
imp_Factors <- c('ImportanceState_NameFamily',
'ImportanceState_Citizenship',
'ImportanceState_Language',
'ImportanceState_Friends',
'ImportanceState_School',
'ImportanceState_Behaviour',
'ImportanceState_Other')
equ_Factors = c('EqualOpp_Work',
'EqualOpp_StateWork',
'EqualOpp_HeadWork',
'EqualOpp_Business',
'EqualOpp_Politics',
'EqualOpp_Education',
'EqualOpp_StartUp',
'EqualOpp_Pay',
'EqualOpp_Benefit')
decisionTree(D, 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors.png',
"Satisfaction by Factors")
decisionTree(D, 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors.png',
"Satisfaction by Factors",
rpartMethod="anova")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors.png',
"Satisfaction by Factors",
rpartMethod="anova")
decisionTree(D, 'Satisfaction', c(sat_Factors, equ_Factors),
'decTree__Satisfaction-Factors(ex=agree).png',
"Satisfaction by Factors",
rpartMethod="anova")
decisionTree(D, 'Satisfaction', c(sat_Factors, equ_Factors),
'decTree__Satisfaction-Factors(ex=agree).png',
"Satisfaction by Factors",
rpartMethod="anova")
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors.png',
"Satisfaction by Factors",
rpartMethod="anova")
# Improve visualisation of names
if (cleanNames) {
names(Dloc) <- as.vector(sapply(
cutPrefix(names(Dloc)),
humaniseString)
)
}
decisionTree(D, 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors.png',
"Satisfaction by Factors",
rpartMethod="anova",
cleanNames=FALSE)
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors.png',
"Satisfaction by Factors",
rpartMethod="anova",
cleanNames=FALSE)
decisionTree(D, 'Country', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Country-Factors.png',
"Satisfaction by Factors",
rpartMethod="class",
cleanNames=FALSE)
?subset
subset(D, Country == "Finland")
decisionTree(subset(D, Country == "Finland"), 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors__Fin.png',
"Satisfaction by Factors",
rpartMethod="anova",
cleanNames=FALSE)
decisionTree(subset(D, Country == "Estonia"), 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors__Est.png',
"Satisfaction by Factors",
rpartMethod="anova",
cleanNames=FALSE)
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(subset(D, Country == "Finland"), 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors__Fin.png',
"Satisfaction by Factors",
rpartMethod="anova",
cleanNames=FALSE)
decisionTree(subset(D, Country == "Estonia"), 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors__Est.png',
"Satisfaction by Factors",
rpartMethod="anova",
cleanNames=FALSE)
decisionTree(subset(D, Country == "Finland"), 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors__Fin.png',
"Satisfaction by Factors (Finland)",
rpartMethod="anova",
cleanNames=FALSE)
decisionTree(subset(D, Country == "Estonia"), 'Satisfaction', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Satisfaction-Factors__Est.png',
"Satisfaction by Factors (Estonia)",
rpartMethod="anova",
cleanNames=FALSE)
# Is Satisfaction affected by Russian-ness?
decisionTree(D, 'Satisfaction', Nat_Factors
'decTree__Satisfaction-Nat_Factors.png',
"Satisfaction by Nationality factors",
rpartMethod="anova",
cleanNames=FALSE)
# Is Satisfaction affected by Russian-ness?
decisionTree(D, 'Satisfaction', Nat_Factors,
'decTree__Satisfaction-Nat_Factors.png',
"Satisfaction by Nationality factors",
rpartMethod="anova")
decisionTree(D, 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors.png',
"Satisfaction by Nationality factors",
rpartMethod="anova")
nat_Factors = c('Nat_TimeSpent',
'Nat_SocialGroups',
'Nat_Feeling',
'Nat_Influence',
'Nat_Happiness',
'Nat_Belonging',
'Nat_Importance',
'Nat_Speaking',
'Nat_Pride',
'Nat_CulturalActivities',
'Nat_Attachment',
'Nat_Liking')
# Is Satisfaction affected by Russian-ness?
decisionTree(D, 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors.png',
"Satisfaction by Nationality factors",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Estonia'), 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors__Est.png',
"Satisfaction by Nationality factors (Estonia)",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Finland'), 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors__Fin.png',
"Satisfaction by Nationality factors (Finland)",
rpartMethod="anova")
PCA(D[ , nat_Factors])
nQs = length(nat_Factors)
nQs
minMax_Q = [1, 4]
minMax_Q = c(1, 4)
minMax_Q
rowSums(D[, natFacors])
rowSums(D[, nat_Factors])
PCA(D[ , nat_Factors])
corrAll(D[ , nat_Factors], "Correlate Nationality appraisal")
minMax_Q = c(1, 4)
nQs = length(nat_Factors)
D$Nat_tScore <- (rowSums(D[, nat_Factors]) - nQs * minMax_Q[1]) /
((minMax_Q[2] - minMax_Q[1]) * nQs) * 10
View(D)
?rowSums
#### Index from Nat_factors (1-4 scale) ---> 1-10 scale
minMax_Q = c(1, 4)
nQs = length(nat_Factors)
D$Nat_tScore <- (rowSums(D[, nat_Factors], na.rm=T) - nQs * minMax_Q[1]) /
((minMax_Q[2] - minMax_Q[1]) * nQs) * 10
View(D)
scatterPlotMulti(D, 'Age', 'Nat_tScore', 'Country',
'age-vs-Nationality.png')
#### Index from Nat_factors (1-4 scale) ---> 1-10 scale
minMax_Q = c(1, 4)
nQs = length(nat_Factors)
D$NationalityScore <- (rowSums(D[, nat_Factors], na.rm=T) - nQs * minMax_Q[1]) /
((minMax_Q[2] - minMax_Q[1]) * nQs) * 10
# Age vs Time-In-Country
scatterPlotMulti(D, 'Age', 'NationalityScore', 'Country',
'age-vs-Nationality.png')
D$NationalityScore[D$NationalityScore < 0]
D$NationalityScore[D$NationalityScore < 0] <- NA
View(D)
# Age vs Time-In-Country
scatterPlotMulti(D, 'Age', 'NationalityScore', 'Country',
'age-vs-Nationality.png')
decisionTree(D, 'NationalityScore', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Nationality-Factors.png',
"Nationality by Factors",
rpartMethod="anova",
cleanNames=FALSE)
scatterPlotMulti(D, 'NationalityScore', 'Satisfaction', 'Country',
'Satisfaction-vs-Nationality.png')
decisionTree(D, 'Satisfaction', agr_Factors,
'decTree__Satisfaction-agrFactors.png',
"Satisfaction by Personality",
rpartMethod="anova",
cleanNames=FALSE)
decisionTree(D, 'Satisfaction', agr_Factors,
'decTree__Satisfaction-agrFactors.png',
"Satisfaction by Personality",
rpartMethod="anova")
decisionTree(D, 'Satisfaction', sat_Factors,
'decTree__Satisfaction-satFactors.png',
"Satisfaction by Satisfaction factors",
rpartMethod="anova")
decisionTree(D, 'Satisfaction', equ_Factors,
'decTree__Satisfaction-equFactors.png',
"Satisfaction by Equality",
rpartMethod="anova")
subset(D == "Estonia")
mew = subset(D == "Estonia")
View(mew)
?subset
View(D)
mew <- subset(D, Country == "Estonia")
View(mew)
View(subset(D, Country == "Estonia"))
subset(D, Country == "Estonia")
source('~/Projects/BSRS/satisfaction.R', echo=TRUE)
View(D)
scatterPlotMulti(D, 'TimeInCountry', 'NationalityScore', 'Country',
'TIC-vs-Nationality.png')
for (l in studyLoc) {
Dloc <- subset(D, Country == l)
fit <- lm(formula = Age ~ TimeInCountry, data = Dloc)
print(summary(fit))
stargaze(fit)
}
library(stargaze)
library(stargazer)
for (l in studyLoc) {
Dloc <- subset(D, Country == l)
fit <- lm(formula = Age ~ TimeInCountry, data = Dloc)
print(summary(fit))
stargazer(fit)
}
latex(stargazer(fit))
library(latex)
xtable(stargazer(fit))
library(xtable)
xtable(stargazer(fit))
print(stargazer(fit))
pdflatex(stargazer(fit))
library(pdflatex)
xtable(summary(fit))
cat(stargazer(fit), file='tables/age_TIC.LaTeX')
texi2pdf('tables/age_TIC.LaTeX')
library(texi2pdf)
library(texi2dvi)
library(tools)
cat(stargazer(fit), file='tables/age_TIC.LaTeX')
texi2pdf('tables/age_TIC.LaTeX')
latexfile='tables/age_TIC.LaTeX'
cat(stargazer(fit), file=latexfile)
shell(cmd=paste("xelatex --mode=batchmode", basename(latexfile)),
mustWork=TRUE, intern=TRUE, translate=TRUE)
library(shell)
install.packages('shell')
texi2pdf(file = latexfile)
texi2pdf(file = latexfile)
texi2pdf(file = latexfile)
stargazer(fit)
write(stargazer(fit), file=latexfile)
texi2pdf(file = latexfile)
texi2pdf(file = latexfile)
texi2pdf(file = latexfile)
texi2pdf(file = latexfile)
texi2pdf(file = latexfile, LATEX=xelatex)
texi2dvi(file = latexfile, LATEX=xelatex)
?texi2dvi
texi2dvi(file = latexfile)
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
?knitr
??knitr
library(knitr)
knit_print(stargazer(fit))
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
latexfile='tables/age_TIC.tex'
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
write(stargazer(fit), file=latexfile)
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
fitTbl <- stargazer(fit)
fitTbl
typeof(fitTble)
typeof(fitTbl)
fitTbl[1]
fitTbl[2]
fitTbl[3]
fitTbl[4]
latexfile <- 'tables/age_TIC.tex'
fitTbl <- stargazer(fit)
fitTlb <- c('\documentclass{article}', '\begin{document}', fitTbl, '\end{document}')
fitTlb <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
latexfile <- 'tables/age_TIC.tex'
fitTbl <- stargazer(fit)
fitTbl <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
?texi2dvi
?cd
WD <- getwd()
WD
fit <- lm(formula = Age ~ TimeInCountry, data = Dloc)
print(summary(fit))
latexfile <- 'tables/age_TIC.tex'
fitTbl <- stargazer(fit)
fitTbl <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
setwd(file.path(WD, 'tables'))
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
setwd(WD)
setwd(file.path(WD, 'tables'))
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
latexfile
print(summary(fit))
latexfile <- 'tables/age_TIC.tex'
fitTbl <- stargazer(fit)
fitTbl <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
setwd(file.path(WD, 'tables'))
texi2dvi(file = file.path(WD, latexfile), pdf = TRUE, clean = TRUE)
setwd(WD)
print(summary(fit))
latexfile <- file.path(WD, 'tables/age_TIC.tex')
fitTbl <- stargazer(fit)
fitTbl <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
setwd(file.path(WD, 'tables'))
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
setwd(WD)
latexTable <- function(fit, tableName) {
latexfile <- file.path(WD, 'tables', paste(tableName, '.tex', sep=''))
fitTbl <- stargazer(fit)
fitTbl <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
setwd(file.path(WD, 'tables'))
texi2dvi(file = latexfile, pdf = TRUE, clean = TRUE)
setwd(WD)
}
fit <- lm(formula = Age ~ TimeInCountry, data = Dloc)
print(summary(fit))
latexTable <- function(fit, 'age_TIC')
latexTable <- latexTable(fit, 'age_TIC')
