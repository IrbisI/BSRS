D[D$IncomeFuture==6 & !is.na(D$IncomeFuture), 'IncomeFuture'] <- NA
source('~/Projects/BSRS/DO_ANALYSIS.R', echo=TRUE)
linearModel(D, 'IncomeAssessmentScale', 'IncomePersonal', 'IncomeA-vs-IncomeP')
# Plot age versus income level
histMulti(D, "Age", "IncomeLevel", "Age-IncomeLevel.png")
# Plot age versus Occupation
histMulti(D, "Age", "Occupation", "Age-Occupation.png")
# Plot age versus Education
histMulti(D, "Age", "Education", "Age-Education.png")
treeFactors <- c('Age', 'Gender', 'Education', 'Occupation')
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessment', treeFactors, 'DT_incomeL_Finland', 'Income Level (Finland)',
rpartMethod="anova")
D$IncomeAssessment
D$IncomeAssessment
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessment', treeFactors, 'DT_incomeL_Finland', 'Income Level (Finland)',
rpartMethod="anova")
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Finland', 'Income Level (Finland)',
rpartMethod="anova")
decisionTree
D$IncomeAssessmentScale
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Finland', 'Income Level (Finland)',
rpartMethod="anova")
df_subset
df_subset
decisionTree <- function(df, intFactor, choiceFactors, fileName=NULL, graphTitle=NULL,
rpartMethod="class", cleanNames=TRUE) {
set.seed(randomSeed)
# Data is subset containing critical factors
df_subset <- df[, c(intFactor, choiceFactors)]
# Improve visualisation of names
if (cleanNames) {
names(df_subset) <- as.vector(sapply(
cutPrefix(names(df_subset)),
humaniseString)
)
}
frmla <- paste(humaniseString(intFactor), '~ .')
# Decision tree
tr <- rpart(frmla,
data=df_subset, method=rpartMethod
)
print(summary(tr))
if (!is.null(fileName)) {
png(file.path('graphs', fileName),
width     = 6,
height    = 6,
units     = "in",
res       = 300)
}
fancyRpartPlot(tr, sub="")
if (!is.null(graphTitle)){
title(main=graphTitle, line=3)
}
if (!is.null(fileName)) {
dev.off()
}
}
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Finland', 'Income Level (Finland)',
rpartMethod="anova")
frmla <- paste(humaniseString(intFactor), '~ .')
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Finland', 'Income Level (Finland)',
rpartMethod="anova", cleanNames=FALSE)
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Finland.png', 'Income Level (Finland)',
rpartMethod="anova", cleanNames=FALSE)
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Finland.png', 'Income Level (Finland)',
rpartMethod="anova", cleanNames=FALSE)
D$Studying <- FALSE
D[as.numeric(D$Occupation) %in% c(5, 7)] <- TRUE
D[as.numeric(D$Occupation) == 5] <- TRUE
D[!is.na(D$Occupation) && as.numeric(D$Occupation) %in% c(5, 7) ] <- TRUE
View(D)
as.numeric(D$Occupation)
as.numeric(D$Occupation) %in% c(5, 7)
D[!is.na(D$Occupation) && (as.numeric(D$Occupation) %in% c(5, 7)) ] <- TRUE
View(D)
D$Studying
D[(as.numeric(D$Occupation) %in% c(5, 7)) ]
D[!is.na(D$Occupation) && (as.numeric(D$Occupation) %in% c(5, 7)), 'Studying'] <- TRUE
View(D)
D[as.numeric(D$Occupation) %in% c(5, 7), 'Studying'] <- TRUE
View(D)
mew <- D[, c('Occupation', 'Studying')]
View(mew)
D$Working <- FALSE
D[as.numeric(D$Occupation) %in% c(1, 2, 3, 4, 5), 'Working'] <- TRUE
View(D)
mew <- D[, c('Occupation', 'Working')]
View(mew)
D$Benefits <- FALSE
D[as.numeric(D$Occupation) %in% c(9), 'Benefits'] <- TRUE
mew <- D[, c('Occupation', 'Benefits')]
mew
view(mew)
View(mew)
treeFactors <- c('Age', 'Gender', 'Education', 'Working', 'Studying', 'Benefits')
decisionTree(subset(D, Country == 'Finland'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Finland.png', 'Income Level (Finland)',
rpartMethod="anova", cleanNames=FALSE)
decisionTree(subset(D, Country == 'Estonia'),
'IncomeAssessment', treeFactors, 'DT_incomeL_Estonia', 'Income Level (Estonia)',
rpartMethod="anova")
decisionTree(subset(D, Country == 'Estonia'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Estonia', 'Income Level (Estonia)',
rpartMethod="anova", cleanNames=FALSE)
decisionTree(subset(D, Country == 'Estonia'),
'IncomeAssessmentScale', treeFactors, 'DT_incomeL_Estonia.png', 'Income Level (Estonia)',
rpartMethod="anova", cleanNames=FALSE)
# Plot age versus Occupation
histMulti(D, "Age", "Occupation", "Age-Occupation.png")
?ggsave
saveGraph <- function(p, fileName=NULL) {
print(fileName)
if (!is.null(fileName)) {
ggsave(file.path('graphs', fileName), p, width=9, height=6)
} else {
p
}
}
# Plot age versus income level
histMulti(D, "Age", "IncomeLevel", "Age-IncomeLevel.png")
# Plot age versus Occupation
histMulti(D, "Age", "Occupation", "Age-Occupation.png")
# Plot age versus Education
histMulti(D, "Age", "Education", "Age-Education.png")
# Plot Age versus income personal
histMulti(D, "Age", "IncomeLevel", "Age-IncomePersonal.png")
histMulti(D, "Age", "IncomePersonal", "Age-IncomePersonal.png")
D$IncomePersonal
D$IncomeScale
D$IncomeFactor
histMulti(D, "Age", "IncomeFactor", "Age-IncomeFactor.png")
histMulti(D, "Age", "IncomeAssessment", "Age-IncomeAssessment.png")
histMulti(D, "Age", "IncomeLevel", "Age-IncomeLevel.png")
histMulti(D, "Age", "IncomeFactor", "Age-IncomeFactor.png")
histMulti(D, "Age", "IncomeAssessment", "Age-IncomeAssessment.png")
histMulti(D, "TimeInCountry", "IncomeLevel", "TIC-IncomeLevel.png")
histMulti(D, "TimeInCountry", "IncomeFactor", "TIC-IncomeFactor.png")
histMulti(D, "TimeInCountry", "IncomeAssessment", "TIC-IncomeAssessment.png")
decisionTree(D, 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors.png',
"Future Income by Nationality factors",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Estonia'), 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors__Est.png',
"Future Income by Nationality factors (Estonia)",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Finland'), 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors__Fin.png',
"Future Income by Nationality factors (Finland)",
rpartMethod="anova")
decisionTree(D, 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors.png',
"Future Income by Nationality factors",
rpartMethod="anova", cleanNames = FALSE)
decisionTree(subset(D, Country == 'Estonia'), 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors__Est.png',
"Future Income by Nationality factors (Estonia)",
rpartMethod="anova", cleanNames = FALSE)
decisionTree(subset(D, Country == 'Finland'), 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors__Fin.png',
"Future Income by Nationality factors (Finland)",
rpartMethod="anova", cleanNames = FALSE)
source('~/Projects/BSRS/graphFunctions.R', echo=TRUE)
decisionTree(D, 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors.png',
"Future Income by Nationality factors",
rpartMethod="anova")
names(D)
names(D) == 'Studying'
names(D)[1]
names(D)[2]
which(names(df_subset) == humaniseString(intFactor))
which(names(D) == 'Country')
decisionTree <- function(df, intFactor, choiceFactors, fileName=NULL, graphTitle=NULL,
rpartMethod="class", cleanNames=TRUE) {
set.seed(randomSeed)
# Data is subset containing critical factors
df_subset <- df[, c(intFactor, choiceFactors)]
# Improve visualisation of names
if (cleanNames) {
names(df_subset) <- as.vector(sapply(
cutPrefix(names(df_subset)),
humaniseString)
)
}
# Set interest factor back to original name
names(df_subset)[which(names(df_subset) == humaniseString(intFactor))] <- intFactor
frmla <- paste(intFactor, '~ .')
# Decision tree
tr <- rpart(frmla,
data=df_subset, method=rpartMethod
)
print(summary(tr))
if (!is.null(fileName)) {
png(file.path('graphs', fileName),
width     = 8,
height    = 6,
units     = "in",
res       = 300)
}
fancyRpartPlot(tr, sub="")
if (!is.null(graphTitle)){
title(main=graphTitle, line=3)
}
if (!is.null(fileName)) {
dev.off()
}
}
decisionTree(D, 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors.png',
"Future Income by Nationality factors",
rpartMethod="anova")
decisionTree(D, 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors.png',
"Satisfaction by Nationality factors",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Estonia'), 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors__Est.png',
"Satisfaction by Nationality factors (Estonia)",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Finland'), 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors__Fin.png',
"Satisfaction by Nationality factors (Finland)",
rpartMethod="anova")
decisionTree(D, 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors.png',
"Future Income by Nationality factors",
rpartMethod="anova")
D$NationalityScore
linearModel <- function(D, 'NationalityScore',
c('Satisfaction', 'Agree_FutureHope', 'IncomeFuture'),
'natScore-vs-Satisfaction_Future')
linearModel(D, 'NationalityScore',
c('Satisfaction', 'Agree_FutureHope', 'IncomeFuture'),
'natScore-vs-Satisfaction_Future')
?lm
paste('as.numeric(', independent, ')', collapse=" + ")
independent = c('blah', 'foo')
paste('as.numeric(', independent, ')', collapse=" + ")
# linear model function, prints report
linearModel <- function(df, dependent, independent, fileName=NULL) {
frmla <- paste(dependent, "~", paste('as.numeric(', independent, ')', collapse=" + "))
fit <- lm(formula = frmla, data = df)
print(summary(fit))
if (!is.null(fileName)){
lt <- latexTable(fit, fileName)
}
}
linearModel(D, 'NationalityScore',
c('Satisfaction', 'Agree_FutureHope', 'IncomeFuture'),
'natScore-vs-Satisfaction_Future')
linearModel(D, 'NationalityScore',
c('Satisfaction_Work', 'Satisfaction_Safety', 'Satisfaction_Home',
'Satisfaction_Family', 'Satisfaction_Material', 'Satisfaction_Friends',),
'natScore-vs-SatisfactionFactors')
linearModel(D, 'NationalityScore',
c('Satisfaction_Work', 'Satisfaction_Safety', 'Satisfaction_Home',
'Satisfaction_Family', 'Satisfaction_Material', 'Satisfaction_Friends'),
'natScore-vs-SatisfactionFactors')
linearModel(D, 'NationalityScore',
c('Agree_FutureHope', 'Agree_NotRecognised', 'Agree_SecondClassCitizen',
'Agree_DefendInterests', 'Agree_LookFromAbove', 'Agree_NoInfluence',),
'natScore-vs-Appraisal')
linearModel(D, 'NationalityScore',
c('Agree_FutureHope', 'Agree_NotRecognised', 'Agree_SecondClassCitizen',
'Agree_DefendInterests', 'Agree_LookFromAbove', 'Agree_NoInfluence'),
'natScore-vs-Appraisal')
linearModel(D, 'NationalityScore',
c('EqualOpp_Work', 'EqualOpp_StateWork', 'EqualOpp_HeadWork',
'EqualOpp_Business', 'EqualOpp_Politics', 'EqualOpp_Education',
'EqualOpp_StartUp', 'EqualOpp_Pay', 'EqualOpp_Benefit'),
'natScore-vs-EqualOpp')
linearModel(D, 'NationalityScore',
c('IncomeLevel', 'IncomeFuture', 'IncomePersonal', 'IncomeAssessment',
'Working', 'Benefit', 'Student'),
'natScore-vs-Income')
linearModel(D, 'NationalityScore',
c('IncomeLevel', 'IncomeFuture', 'IncomePersonal', 'IncomeAssessment',
'Working', 'Benefits', 'Student'),
'natScore-vs-Income')
linearModel(D, 'NationalityScore',
c('IncomeLevel', 'IncomeFuture', 'IncomePersonal', 'IncomeAssessment',
'Working', 'Benefits', 'Studying'),
'natScore-vs-Income')
linearModel(D, 'NationalityScore',
c('IncomeLevel', 'IncomeFuture', 'IncomePersonal', 'IncomeAssessment'),
'natScore-vs-Income')
linearModel(D, 'NationalityScore',
c('Satisfaction'),
'natScore-vs-Satisfaction_Future')
linearModel(D, 'NationalityScore',
c('Satisfaction', 'Age', 'TimeInCountry'),
'natScore-vs-Satisfaction_Future')
linearModel(D, 'NationalityScore',
c('Satisfaction', 'Age', 'TimeInCountry'),
'natScore-vs-MainFactors')
linearModel(D, 'NationalityScore',
c('Satisfaction', 'Country', 'Age', 'TimeInCountry'),
'natScore-vs-MainFactors')
D$Country
levels(D$Country)
as.numeric(levels(D$Country))
as.numeric(D$Country)
linearModel(subset(D, Country=="Estonia"), 'NationalityScore',
c('Satisfaction', 'Age', 'TimeInCountry'),
'natScore-vs-MainFactors__Estonia')
linearModel(subset(D, Country=="Estonia"), 'NationalityScore',
c('Satisfaction', 'Age', 'TimeInCountry'),
'natScore-vs-MainFactors__Estonia')
linearModel(subset(D, Country=="Finland"), 'NationalityScore',
c('Satisfaction', 'Age', 'TimeInCountry'),
'natScore-vs-MainFactors__Finland')
source('~/Projects/BSRS/QuestionGroups.R', echo=TRUE)
linearModel(D, 'NationalityScore',
sta_Factors,
'natScore-vs-StateLangFactors')
sta_Factors <- c('StateLanguageListen',
'StateLanguageRead',
'StateLanguageSpeak',
'StateLanguageWrite')
D$Sta
sta_Factors <- c('StateLanguageListen',
'StateLanguageRead',
'StateLanguageSpeak',
'StateLanguageWrite')
linearModel(D, 'NationalityScore',
sta_Factors,
'natScore-vs-StateLangFactors')
sta_Factors
D$StateLanguageListen
source('~/Projects/BSRS/DO_ANALYSIS.R', echo=TRUE)
# Appraisal (do you Agree/Disagree?)
source('appraisal.R')
# Future orientedness (School for children)
source('futureOrientedness.R')
# Personal info
source('personalInfo.R')
# Integration
source('integration.R')
# Nationality
source('nationality.R')
D$StateLanguageListen
#### Prepare analysis ####
# Run data analysis step by step
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
D$LanguageFinnish
D$StateLanguageListen
D$StateLanguageRead
D$StateLanguageSpeak
D$StateLanguageWrite
source('nationality.R')
source('~/Projects/BSRS/satisfaction.R', echo=TRUE)
D_sub <- D[, agr_Factors]
corrgram(D_sub,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Appraisal")
print("Dimensions before/after ignoring NAs")
print(dim(D_sub))
print(dim(na.omit(D_sub)))
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
fit <- princomp(na.omit(D_sub),
center = TRUE, scale = TRUE,
cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
PCA = function(D_sub)
source('~/Projects/BSRS/analysisFunctions.R', echo=TRUE)
PCA(D_sub)
View(D_sub)
agr_Factors <- c('Agree_FutureHope',
'Agree_NotRecognised',
'Agree_SecondClassCitizen',
'Agree_DefendInterests',
'Agree_LookFromAbove',
'Agree_NoInfluence')
D_sub <- D[, agr_Factors]
PCA(D_sub)
# correlogram function
corrAll <- function(df, graphTitle) {
corrgram(df,
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main = graphTitle)
}
source('~/Projects/BSRS/satisfaction.R', echo=TRUE)
source('integration.R')
D_sub = D[ ,
c(lan_Factors,
sta_Factors)]
# Language
lanStrength = D[, lan_Factors]
lanStrength[is.na(lanStrength)] = 0
fit <- princomp(lanStrength,
center = TRUE, scale = TRUE,
cor=TRUE)
PCA(lanStrength)
lanFactors
lan_Factors
lan_Factors <- c('LanguageFinnish',
'LanguageEstonian',
'LanguageSwedish',
'LanguageEnglish',
'LanguageGerman')
lanStrength = D[, lan_Factors]
PCA(lanStrength)
PCA(lanStrength)
PCA(D[, sta_Factors])
PCA
D[, sta_Factors]
?princomp
PCA = function(df) {
df <- as.numeric(df)
fit <- princomp(na.omit(df),
center = TRUE, scale = TRUE,
cor = FALSE) # Use Covariance matrix, not Correlation
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit, type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
}
PCA(D[, lan_Factors])
PCA(D[, sta_Factors])
# Princial Component Analysis function
PCA = function(df) {
for(i in c(1:ncol(df))) {
df[,i] <- as.numeric(df[,i])
}
fit <- princomp(na.omit(df),
center = TRUE, scale = TRUE,
cor = FALSE) # Use Covariance matrix, not Correlation
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit, type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
}
PCA(D[, lan_Factors])
PCA(D[, sta_Factors])
source('~/Projects/BSRS/DO_ANALYSIS.R', echo=TRUE)
source('socioEconomic.R')
source('basicTraits.R')
source('futureOrientedness.R')
source('nationality.R')
source('satisfaction.R')
source('integration.R')
# Correlogram of Nationality appraisal
corrAll(D[ , nat_Factors], "Correlate Nationality appraisal")
# Principal Component Analysis of Nat_* factors
PCA(D[ , nat_Factors])
#### Decision Trees (nat factors as independent) ####
# Is Satisfaction affected by Russian-ness?
decisionTree(D, 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors.png',
"Satisfaction by Nationality factors",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Estonia'), 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors__Est.png',
"Satisfaction by Nationality factors (Estonia)",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Finland'), 'Satisfaction', nat_Factors,
'decTree__Satisfaction-Nat_Factors__Fin.png',
"Satisfaction by Nationality factors (Finland)",
rpartMethod="anova")
# Is expected Future Income affected by Russian-ness?
decisionTree(D, 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors.png',
"Future Income by Nationality factors",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Estonia'), 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors__Est.png',
"Future Income by Nationality factors (Estonia)",
rpartMethod="anova")
decisionTree(subset(D, Country == 'Finland'), 'IncomeFuture', nat_Factors,
'decTree__IncomeFuture-Nat_Factors__Fin.png',
"Future Income by Nationality factors (Finland)",
rpartMethod="anova")
#### Decision Trees (nat score as dependent) ####
decisionTree(D, 'NationalityScore', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Nationality-Factors.png',
"Nationality by Factors",
rpartMethod="anova")
decisionTree(D, 'NationalityScore', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Nationality-Factors.png',
"Nationality by Factors",
rpartMethod="anova")
decisionTree(D, 'NationalityScore', c(sat_Factors, agr_Factors, equ_Factors),
'decTree__Nationality-Factors.png',
"Nationality by Factors",
rpartMethod="anova",
cleanNames=FALSE)
source('nationality.R')
source('~/Projects/BSRS/DO_ANALYSIS.R', echo=TRUE)
