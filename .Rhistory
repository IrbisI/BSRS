manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
p <- ggplot(D_subset_m, aes(variable, value)) +
stat_summary(fun.y=mean, aes(fill = Country), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes(fill = Country), position=position_dodge(), geom = "errorbar") +
coord_flip()
saveGraph(p, fileName=cat(prefix, "_Country__MANOVA.png"))
p
}
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot(D, q_agree, "Agree_")
manova_plot(D, q_equal_opp, "EqualOpp_")
ls()
!ls
lsdir
list.dirs()
list.dirs('graphs')
list.files('graphs')
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
p <- ggplot(D_subset_m, aes(variable, value)) +
stat_summary(fun.y=mean, aes(fill = Country), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes(fill = Country), position=position_dodge(), geom = "errorbar") +
coord_flip()
saveGraph(p, fileName=cat(prefix, "_Country__MANOVA.png"))
#p
}
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot(D, q_agree, "Agree_")
manova_plot(D, q_equal_opp, "EqualOpp_")
saveGraph <- function(p, fileName=NULL) {
print(fileName)
if (!is.null(fileName)) {
print('hello')
ggsave(file.path('graphs', fileName), p, width=9, height=6)
} else {
print('bye')
p
}
}
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
p <- ggplot(D_subset_m, aes(variable, value)) +
stat_summary(fun.y=mean, aes(fill = Country), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes(fill = Country), position=position_dodge(), geom = "errorbar") +
coord_flip()
saveGraph(p, fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
}
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot(D, q_agree, "Agree_")
manova_plot(D, q_equal_opp, "EqualOpp_")
scatterPlot(D, 'Satisfaction', 'IncomePersonal', "Satisfaction vs. Income", fileName="Satisfaction_Income.png")
scatterPlot(D, 'Age', 'NationalityScore', "Age vs. Nat. Score", fileName="Age_NatScore.png")
scatterPlotMulti(D, 'Satisfaction', 'IncomePersonal', "Country",
"Satisfaction vs. Income", fileName="Satisfaction_Income.png")
barMulti <- function(dataFrame, variable, value, fillCol, ) {
p <- ggplot(D_subset_m, aes_string(variable, value)) +
barMulti <- function(dataFrame, variable, value, fillCol) {
p <- ggplot(D_subset_m, aes_string(variable, value)) +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
coord_flip()
}
barMulti <- function(dataFrame, variable, value, fillCol) {
p <- ggplot(D_subset_m, aes_string(variable, value)) +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
coord_flip()
}
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
#p <- ggplot(D_subset_m, aes(variable, value)) +
#  stat_summary(fun.y=mean, aes(fill = Country), position=position_dodge(), geom="bar", colour='black') +
#  stat_summary(fun.data =  mean_cl_normal, aes(fill = Country), position=position_dodge(), geom = "errorbar") +
#  coord_flip()
barMulti(D_subset_m, 'variable', 'value', 'Country')
saveGraph(p, fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
}
manova_plot(D, q_satisfaction, "Satisfaction_")
barMulti <- function(dataFrame, variable, value, fillCol) {
p <- ggplot(D_subset_m, aes_string(variable, value)) +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
coord_flip()
p
}
manova_plot(D, q_satisfaction, "Satisfaction_")
col_names = q_satisfaction
data = D
prefix = "Satisfaction_"
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
barMulti(D_subset_m, 'variable', 'value', 'Country')
saveGraph(p, fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
p <- barMulti(D_subset_m, 'variable', 'value', 'Country')
saveGraph(p, fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
barMulti <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(paste(humaniseString(fillCol), 'by', humaniseString(xCol)))
}
p <- ggplot(D_subset_m, aes_string(variable, value)) +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
gg_title(graphTitle) +
coord_flip()
saveGraph(p, fileName)
}
barMulti <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(paste(humaniseString(fillCol), 'by', humaniseString(xCol)))
}
p <- ggplot(D_subset_m, aes_string(variable, value)) +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
gg_title(graphTitle) +
coord_flip()
saveGraph(p, fileName)
}
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
p <- barMulti(D_subset_m, 'variable', 'value', fillCol='Country',
graphTitle="Satisfaction by Country",
fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
}
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
print(col)
p <- barMulti(D_subset_m, 'variable', 'value', fillCol='Country',
D_subset_m <- melt(D_subset, id.vars = 'Country')
graphTitle=paste(prefix, "by Country"),
fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
}
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
p <- barMulti(D_subset_m, 'variable', 'value', fillCol='Country',
graphTitle=paste(prefix, "by Country"),
fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
}
manova_plot(D, q_satisfaction, "Satisfaction_")
barMulti <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(paste(humaniseString(fillCol), 'by', humaniseString(xCol)))
}
p <- ggplot(D_subset_m, aes_string(variable, value)) +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
ggtitle(graphTitle) +
coord_flip()
saveGraph(p, fileName)
}
histOpaque <- function(dataFrame, xCol, fillCol, fileName=NULL, graphTitle=NULL) {
a
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot(D, q_agree, "Agree_")
manova_plot(D, q_equal_opp, "EqualOpp_")
)
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot(D, q_agree, "Agree_")
manova_plot(D, q_equal_opp, "EqualOpp_")
?gsub
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
p <- barMulti(D_subset_m, 'variable', 'value', fillCol='Country',
graphTitle=paste(gsub("_", "", prefix), "by Country"),
fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
}
manova_plot(D, q_satisfaction, "Satisfaction_")
manova_plot(D, q_agree, "Agree_")
manova_plot(D, q_equal_opp, "EqualOpp_")
scatterPlotMulti(D, "IncomePersonal", "NationalityScore", "Country",
fileName=paste("Income-vs-Nationality.png"),
graphTitle=("Income vs Nat. Score"))
violinPlot <- function(dataFrame, xCol, yCol, fileName=NULL, graphTitle=NULL){
if (is.null(graphTitle)) {
graphTitle <- ggtitle(paste(humaniseString(xCol), 'vs.',humaniseString(yCol)))
}
ggplot(data=dataFrame, aes_string(x=xCol, y=yCol)) +
geom_violin() +
ggtitle(graphTitle) +
stat_summary(fun.y=median, geom="point", size=2, color="red") +
coord_flip()
saveGraph(p, fileName)
}
violinPlot(D_subset, 'Occupation', 'NationalityScore',
fileName = 'Violin_Occ_NatScore.png',
graphTitle = 'Nat. Score by Occupation')
violinPlot <- function(dataFrame, xCol, yCol, fileName=NULL, graphTitle=NULL){
if (is.null(graphTitle)) {
graphTitle <- ggtitle(paste(humaniseString(xCol), 'vs.',humaniseString(yCol)))
}
ggplot(data=dataFrame, aes_string(x=xCol, y=yCol)) +
geom_violin() +
ggtitle(graphTitle) +
stat_summary(fun.y=median, geom="point", size=2, color="red") +
coord_flip()
saveGraph(p, fileName)
}
violinPlot(D_subset, 'Occupation', 'NationalityScore',
fileName = 'Violin_Occ_NatScore.png',
graphTitle = 'Nat. Score by Occupation')
ggplot(data=D_subset, aes(x=Occupation, y=NationalityScore)) +
violinPlot <- function(dataFrame, xCol, yCol, fileName=NULL, graphTitle=NULL){
if (is.null(graphTitle)) {
graphTitle <- ggtitle(paste(humaniseString(xCol), 'vs.',humaniseString(yCol)))
}
p <- ggplot(data=dataFrame, aes_string(x=xCol, y=yCol)) +
geom_violin() +
ggtitle(graphTitle) +
stat_summary(fun.y=median, geom="point", size=2, color="red") +
coord_flip()
saveGraph(p, fileName)
}
violinPlot <- function(dataFrame, xCol, yCol, fileName=NULL, graphTitle=NULL){
if (is.null(graphTitle)) {
graphTitle <- ggtitle(paste(humaniseString(xCol), 'vs.',humaniseString(yCol)))
}
p <- ggplot(data=dataFrame, aes_string(x=xCol, y=yCol)) +
geom_violin() +
ggtitle(graphTitle) +
stat_summary(fun.y=median, geom="point", size=2, color="red") +
coord_flip()
saveGraph(p, fileName)
}
violinPlot(D_subset, 'Occupation', 'NationalityScore',
fileName = 'Violin_Occ_NatScore.png',
graphTitle = 'Nat. Score by Occupation')
ggplot(data=D_subset, aes(x=Occupation, y=NationalityScore)) +
violinPlot(D_subset, 'Occupation', 'NationalityScore',
fileName = NULL, #'Violin_Occ_NatScore.png',
graphTitle = 'Nat. Score by Occupation')
violinPlot(D_subset, 'Occupation', 'NationalityScore',
fileName = NULL, #'Violin_Occ_NatScore.png',
graphTitle = 'Nat. Score by Occupation')
D_subset = D[D$Occupation %in%
c("Housewife", "Unemployed (benefits)", "Student (unemployed)",
"Pensioner (unemployed)", "Student (working)", "Pensioner (working)",
"Entrepreneur", "Employer", "Employee"), ]
model <- lm(NationalityScore ~ Occupation * Country, data=D_subset)
Anova(model, type='II')
violinPlot(D_subset, 'Occupation', 'NationalityScore',
fileName = NULL, #'Violin_Occ_NatScore.png',
graphTitle = 'Nat. Score by Occupation')
violinPlot(D_subset, 'Occupation', 'NationalityScore',
fileName = 'Violin_Occ_NatScore.png',
graphTitle = 'Nat. Score by Occupation')
barMulti(D, 'Working', 'NationalityScore', 'Country')
barMulti(D, 'Working', 'NationalityScore', 'Country')
source('~/GitHub/BSRS/BasicClean.R')
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
library(tools)
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(gdata)
library(corrgram)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
barMulti(D, 'Working', 'NationalityScore', 'Country')
D$Working
barMulti <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(D_subset_m, aes_string(variable, value)) +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
ggtitle(graphTitle) +
coord_flip()
saveGraph(p, fileName)
}
barMulti(D, 'Working', 'NationalityScore', 'Country')
barMulti(D, 'NationalityScore', 'Working', 'Country')
barMulti <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(dataFrame, aes_string(variable, value)) +
stat_summary(fun.y=mean, aes_string(fill = fillCol), position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, aes_string(fill = fillCol), position=position_dodge(), geom = "errorbar") +
ggtitle(graphTitle) +
coord_flip()
saveGraph(p, fileName)
}
barMulti(D, 'NationalityScore', 'Working', 'Country')
ggplot(data=D, aes(x=Working, y=NationalityScore, fill=Country)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
coord_flip()
barMulti(D, 'NationalityScore', 'Working', 'Country')
ggplot(data=D, aes(x=Working, y=NationalityScore, fill=Country)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
coord_flip()
ggplot(data=D, aes_string(x='Working', y='NationalityScore', fill='Country')) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
coord_flip()
ggplot(data=D, aes_string(x='Working', y='NationalityScore', fill='Country')) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
coord_flip()
barSimple(D, 'NationalityScore', 'Working', 'Country')
barSimple <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(data=D, aes_string(x=variable, y=value, fill=fillCol)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
coord_flip()
saveGraph(p, fileName)
}
barSimple(D, 'NationalityScore', 'Working', 'Country')
barSimple <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(data=dataFrame, aes_string(x=variable, y=value, fill=fillCol)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
coord_flip()
saveGraph(p, fileName)
}
barSimple(D, 'NationalityScore', 'Working', 'Country')
ggplot(data=D, aes_string(x='Working', y='NationalityScore', fill='Country')) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
coord_flip()
barSimple <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(data=dataFrame, aes_string(x=variable, y=value, fill=fillCol)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
coord_flip()
saveGraph(p, fileName)
}
barSimple(D, 'NationalityScore', 'Working', 'Country')
barSimple <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(data=dataFrame, aes_string(x=variable, y=value, fill=fillCol)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar")
saveGraph(p, fileName)
}
barSimple(D, 'NationalityScore', 'Working', 'Country')
p <- ggplot(data=D, aes_string(x='Working', y='NationalityScore', fill='Country')) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
coord_flip()
p
barSimple(dataFrame=D, 'NationalityScore', 'Working', 'Country')
barSimple(dataFrame=D, 'Working', 'NationalityScore', 'Country')
barMulti <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(data=dataFrame, aes_string(x=variable, y=value, fill=fillCol)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
coord_flip()
saveGraph(p, fileName)
}
manova_plot(D, q_satisfaction, "Satisfaction_")
barMulti(dataFrame=D, 'Working', 'NationalityScore', 'Country',
fileName="Hist_Working-vs-NatScore.png",
graphTitle = "Nat. Score by Employment")
barMulti <- function(dataFrame, variable, value, fillCol, fileName=NULL, graphTitle=NULL) {
if (is.null(graphTitle)) {
graphTitle <- ggtitle(humaniseString(fillCol))
}
p <- ggplot(data=dataFrame, aes_string(x=variable, y=value, fill=fillCol)) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
stat_summary(fun.data =  mean_cl_normal, position=position_dodge(), geom = "errorbar") +
ggtitle(graphTitle) +
coord_flip()
saveGraph(p, fileName)
}
barMulti(dataFrame=D, 'Working', 'NationalityScore', 'Country',
fileName="Hist_Working-vs-NatScore.png",
graphTitle = "Nat. Score by Employment")
p <- ggplot(data=D, aes_string(x='Working', y='NationalityScore', fill='Country')) +
stat_summary(fun.y=mean, position=position_dodge(), geom="bar", colour='black') +
manova_plot(D, q_nationality, "Nat_")
manova_plot(D, q_importance_state, "ImportanceState_")
