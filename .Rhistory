View(D)
D$Emigration_A <- do.call(paste, c(D[c("Emigration_1", "Emigration_2")], sep = " "))
View(D)
stringGrouping("Emigration_A", countriesE)
# Emigration analysis
countriesE = c("росс", "эст", "фин",
"укр", "бел", "татар", "арме",  "лат", "лит", "поль",
"казах", "узбек", "таджи", "киргиз",
"герм", "австрия", "англ", "швец", "норв", "дания", "ирлан", "лихт", "люкс",
"швей", "чех", "словак", "болгар", "хорва",
"испа", "франц", "итал", "грецию", "португалия", "кипр","монако",
"австралия", "новая зеландия", "мальд", "сша", "канада", "индия", "тайланд", "япония")
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
languageEl
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
languages = c("эст", "выру",
"франц", "испа", "итал", "порт",
"укр", "поль", "армя", "татар", "болг", "бел", "чешс", "латы",
"киргиз", "узбек", "карель", "сету",
"кита", "корей", "венг", "датс" )
stringGrouping("Language_Other_Name", languages)
ggplot(D, aes(x=Age)) + geom_histogram(binwidth=.5)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
ggplot(D, aes(x=Age)) + geom_histogram(binwidth=.5)
ggplot(D, aes(x=Age)) + geom_histogram(binwidth=1)
ggplot(D, aes(x=Age)) + geom_histogram(binwidth=5)
ggplot(D, aes(x=Age)) + geom_histogram(binwidth=3)
ggplot(D, aes(x=Age, fill=Country)) + geom_histogram(binwidth=3)
ggplot(D, aes(x=Age, fill=Country)) +
geom_histogram(binwidth=3) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
ggplot(D, aes(x=Age, fill=Country)) +
geom_histogram(binwidth=3, alpha=.5, position="identity")
ggplot(D, aes(x=Age, fill=Country)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")
# Plot age histogram versus gender
ggplot(D, aes(x=Age, fill=Gender)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")
# Plot age histogram versus country
ggplot(D, aes(x=Age, fill=FamilyStatus)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")
# Plot age histogram versus country
ggplot(D, aes(x=Age, fill=FamilyStatus)) +
geom_histogram(binwidth=5)
# Plot age histogram versus country
ggplot(D, aes(x=Age, fill=Country)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")
# Plot age histogram versus gender
ggplot(D, aes(x=Age, fill=Gender)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")
# Plot age histogram versus country
ggplot(D, aes(x=Age, fill=FamilyStatus)) +
geom_histogram(binwidth=5)
D$Income_Level
# Plot age versus income level
ggplot(D, aes(x=Age, fill=Income_Level)) +
geom_histogram(binwidth=5)
ggplot(D, aes(x=Age, fill=Income_Level)) +
geom_histogram(binwidth=5)
# Plot age versus income level
ggplot(na.omit(D), aes(x=Age, fill=Income_Level)) +
geom_histogram(binwidth=5)
na.omit(D)
length(na.omit(D))
# Plot age versus income level
ggplot(na.omit(D[, c("Age", "Income_Level")]), aes(x=Age, fill=Income_Level)) +
geom_histogram(binwidth=5)
length(na.omit(D[, c("Age", "Income_Level")]))
D[1]
D[, c("Age", "Income_Level")
]
length(D[, c("Age", "Income_Level")])
size(D[, c("Age", "Income_Level")])
height(D[, c("Age", "Income_Level")])
mew = D[, c("Age", "Income_Level")
]
View(mew)
mew = na.omit(mew)
mew
length(mew)
dim(mew)
# Plot age versus income level
ggplot(mew, aes(x=Age, fill=Income_Level)) +
geom_histogram(binwidth=5)
unique(D[, "Income_Level"])
debug('ggplot')
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
debug('unit')
debug('tic_pos.c')
debug('tic_pos')
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
na.omit(D[ ,["Age", "Income_Level"]])
D[ ,["Age", "Income_Level"]]
source('~/.active-rstudio-document', echo=TRUE)
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
na.omit(D[ ,c("Age", "Income_Level")])
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
source('~/Projects/BSRS/socioEconomic.R', echo=TRUE)
# Plot age versus income level
ggplot(D, aes(x=Age, fill=Occupation)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")
# Plot age versus income level
ggplot(D, aes(x=Age, fill=Occupation)) +
geom_histogram(binwidth=5)
# Plot age versus Occupation
ggplot(D, aes(x=Age, fill=Education)) +
geom_histogram(binwidth=5)
View(D_sat)
# Plot age versus Occupation
ggplot(D, aes(x=Age, fill=Education)) +
geom_histogram(binwidth=5)
# Plot age versus income level
ggplot(D[ ,c("Age", "Income_Level")], aes(x=Age, fill=as.factor(Income_Level))) +
geom_histogram(binwidth=5, alpha=.5, position="identity")
ggplot(D, aes(x=Age, fill=Occupation)) +
geom_histogram(binwidth=5)
binWidth = 3
# Plot age histogram versus country
ggplot(D, aes(x=Age, fill=FamilyStatus)) +
geom_histogram(binwidth=binWidth)
# Plot age histogram versus gender
ggplot(D, aes(x=Age, fill=Gender)) +
geom_histogram(binwidth=binWidth, alpha=.5, position="identity")
binWidth
# Plot age histogram versus country
ggplot(D, aes(x=Age, fill=Country)) +
geom_histogram(binwidth=binWidth, alpha=.5, position="identity")
# Plot age versus Occupation
ggplot(D, aes(x=Age, fill=Education)) +
geom_histogram(binwidth=binWidth)
# Plot age versus Occupation
ggplot(D, aes(x=Age, fill=Occupation)) +
geom_histogram(binwidth=binWidth)
pairs(~Satisfaction+Satisfaction_Work+Satisfaction_Safety+Satisfaction_Home+Satisfaction_Family+Satisfaction_Material+Satisfaction_Friends,
data=D,
main="Simple Scatterplot Matrix")
library(corrgram)
corrgram(D[, c('Satisfaction',
'Satisfaction_Work',
'Satisfaction_Safety',
'Satisfaction_Home',
'Satisfaction_Family',
'Satisfaction_Material',
'Satisfaction_Friends',)],
order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Satisfaction")
install.packages('corrgram')
source('~/Projects/BSRS/satisfaction.R', echo=TRUE)
D[, c('Satisfaction',
'Satisfaction_Work',
'Satisfaction_Safety',
'Satisfaction_Home',
'Satisfaction_Family',
'Satisfaction_Material',
'Satisfaction_Friends',)],
corrgram(D[, c('Satisfaction',
'Satisfaction_Work',
'Satisfaction_Safety',
'Satisfaction_Home',
'Satisfaction_Family',
'Satisfaction_Material',
'Satisfaction_Friends')],
order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Satisfaction")
?corrcram
?corrgram
corrgram(D[, c('Satisfaction',
'Satisfaction_Work',
'Satisfaction_Safety',
'Satisfaction_Home',
'Satisfaction_Family',
'Satisfaction_Material',
'Satisfaction_Friends')],
order=TRUE, lower.panel=panel.conf,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlate Satisfaction")
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
fit <- princomp(D, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
fit <- princomp(D_sub, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
D_sub = D[, c('Satisfaction',
'Satisfaction_Work',
'Satisfaction_Safety',
'Satisfaction_Home',
'Satisfaction_Family',
'Satisfaction_Material',
'Satisfaction_Friends')
# Pricipal Components Analysis
# entering raw data and extracting PCs
# from the correlation matrix
fit <- princomp(D_sub, cor=TRUE)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
biplot(fit)
fit <- princomp(D_sub, cor=TRUE)
D_sub = D[, c('Satisfaction',
'Satisfaction_Work',
'Satisfaction_Safety',
'Satisfaction_Home',
'Satisfaction_Family',
'Satisfaction_Material',
'Satisfaction_Friends')
fit <- princomp(D_sub, cor=TRUE)
D_sub
source('~/Projects/BSRS/preprocess.R', echo=TRUE)
text(fit)
fit <- rpart(IncomeLevel ~ Age + Education + Occupation +
Satisfaction_Work + StateLanguage_Satisfaction +
Agree_FutureHope + Agree_NotRecognised + Agree_SecondClassCitizen + Agree_NoInfluence,
data=Dloc,
method="class")
plot(fit)
text(fit)
summary(fit)
install.packages('party')
library(party)
tr <- cforest(IncomeLevel ~
Age + Education + Occupation +
Satisfaction_Work + StateLanguage_Satisfaction +
Agree_FutureHope + Agree_NotRecognised + Agree_SecondClassCitizen + Agree_NoInfluence,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
Dloc <- subset(D, Country == 'Finland')
tr <- cforest(IncomeLevel ~
Age + Education + Occupation +
Satisfaction_Work + Language_Finnish,
Agree_FutureHope + Agree_NotRecognised + Agree_SecondClassCitizen + Agree_NoInfluence,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
Dloc <- subset(D, Country == 'Finland')
tr <- cforest(IncomeLevel ~
Age + Education + Occupation +
Satisfaction_Work + Language_Finnish,
Agree_FutureHope + Agree_NotRecognised + Agree_SecondClassCitizen + Agree_NoInfluence,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
D[, 'Agree_FutureHope']
treeFactors = c('Age', 'Education', 'Occupation',
'Satisfaction_Work', 'Language_Finnish',
'Agree_FutureHope', 'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc = Dloc[, treeFactors]
tr <- cforest(IncomeLevel ~ .,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Satisfaction_Work', 'Language_Finnish',
'Agree_FutureHope', 'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc = Dloc[, treeFactors]
tr <- cforest(IncomeLevel ~ .,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Satisfaction_Work', 'Language_Finnish',
'Agree_FutureHope', 'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc = Dloc[, treeFactors]
drop.na(Dloc)
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Satisfaction_Work', 'Language_Finnish',
'Agree_FutureHope', 'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc = Dloc[, treeFactors]
size(Dloc)
dim(Dloc)
na.drop(Dloc)
Dloc <- na.omit(Dloc)
dim(Dloc)
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
View(Dloc)
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Satisfaction_Work', 'Language_Finnish',
'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
Dloc <- na.omit(Dloc)
dim(Dloc)
View(Dloc)
# 'Agree_FutureHope' removed due to many NAs
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Satisfaction_Work', 'Language_Finnish',
'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
View(Dloc)
# 'Satisfaction_Work' maybe removed...
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Language_Finnish',
'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
Dloc <- na.omit(Dloc)
dim(Dloc)
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Satisfaction_Work', 'Language_Finnish',
'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
Dloc <- na.omit(Dloc)
tr <- cforest(IncomeLevel ~ .,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
plot(tr)
tr <- cforest(IncomeLevel ~ .,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
plot(tr, type='simple')
treeFactors = c('IncomeLevel', 'Age', 'Education', 'Occupation',
'Language_Finnish',
'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
Dloc <- na.omit(Dloc)
tr <- cforest(IncomeLevel ~ .,
data=Dloc, controls=cforest_control(mtry=2, mincriterion=0))
plot(tr, type='simple')
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
plot(tr)
text(tr)
library(randomForest)
summary(tr)
# 'Agree_FutureHope' removed due to many NAs
#  maybe removed...
treeFactors = c('IncomeLevel', 'Age', 'Gender', 'Education', 'Occupation',
'Language_Finnish',
'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, treeFactors]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
text(tr)
plot(tr)
plot(tr)
text(tr)
Dloc <- subset(D, Country == 'Estonian')
Dloc <- Dloc[, c('Language_Estonian', treeFactors)]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, c('Language_Finnish', treeFactors)]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
Dloc <- subset(D, Country == 'Estonian')
Dloc <- Dloc[, c('Language_Estonian', treeFactors)]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
Dloc
Dloc <- subset(D, Country == 'Estonian')
Dloc <- Dloc[, c('Language_Estonian', treeFactors)]
View(Dloc)
Dloc <- subset(D, Country == 'Estonia')
Dloc <- Dloc[, c('Language_Estonian', treeFactors)]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
randomSeed = 208
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, c('Language_Finnish', treeFactors)]
Dloc <- na.omit(Dloc)
# Decision tree
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
set.seed(randomSeed)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=2000)
fancyRpartPlot(fit)
library(fancyRpartPlot)
install.packages('fancyRpartPlot')
fancyRpartPlot(fit)
plot(fit)
summary(fit)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=10000)
plot(fit)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=2000)
varImpPlot(fit)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=2000)
plot(fit)
varImpPlot(fit)
Dloc <- subset(D, Country == 'Estonia')
Dloc <- Dloc[, c('Language_Estonian', treeFactors)]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
set.seed(randomSeed)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=2000)
plot(fit)
#fancyRpartPlot(fit)
varImpPlot(fit)
treeFactors = c('IncomeLevel', 'Age', 'Gender', 'Education', 'Occupation',
'Agree_NotRecognised', 'Agree_SecondClassCitizen', 'Agree_NoInfluence')
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, c('Language_Finnish', treeFactors)]
Dloc <- na.omit(Dloc)
# Decision tree
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
set.seed(randomSeed)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=2000)
plot(fit)
#fancyRpartPlot(fit)
varImpPlot(fit)
Dloc <- subset(D, Country == 'Estonia')
Dloc <- Dloc[, c('Language_Estonian', treeFactors)]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
set.seed(randomSeed)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=2000)
plot(fit)
#fancyRpartPlot(fit)
varImpPlot(fit)
plot(tr)
text(tr)
# Decision tree
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
Dloc <- subset(D, Country == 'Finland')
Dloc <- Dloc[, c('Language_Finnish', treeFactors)]
Dloc <- na.omit(Dloc)
# Decision tree
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
Dloc <- subset(D, Country == 'Estonia')
Dloc <- Dloc[, c('Language_Estonian', treeFactors)]
Dloc <- na.omit(Dloc)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
fit <- randomForest(IncomeLevel ~ .,
data=Dloc, importance=TRUE, ntree=2000)
plot(fit)
#fancyRpartPlot(fit)
varImpPlot(fit)
tr <- rpart(IncomeLevel ~ .,
data=Dloc, method="class")
summary(tr)
plot(tr)
text(tr)
