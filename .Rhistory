summary(D$NationalityScore_ID[D$Country == 'Estonia'])
summary(D$NationalityScore_Affir[D$Country == 'Finland'])
load("~/GitHub/BSRS/.RData")
summary(D$NationalityScore_Affir[D$Country == 'Finland'])
summary(D$NationalityScore_Affir[D$Country == 'Estonia'])
summary(D$NationalityScore_Affir[D$Country == 'Finland'])
summary(D$NationalityScore_Affir[D$Country == 'Estonia'])
summary(D$NationalityScore_ID[D$Country == 'Finland'])
summary(D$NationalityScore_ID[D$Country == 'Estonia'])
load("~/GitHub/BSRS/.RData")
summary(D$NationalityScore_Affir[D$Country == 'Finland'])
summary(D$NationalityScore_Affir[D$Country == 'Estonia'])
summary(D$NationalityScore_ID[D$Country == 'Finland'])
summary(D$NationalityScore_ID[D$Country == 'Estonia'])
summary(D$NationalityScore_Affir[D$Country == 'Finland'])
summary(D$NationalityScore_Affir[D$Country == 'Estonia'])
summary(D$NationalityScore_ID[D$Country == 'Finland'])
summary(D$NationalityScore_ID[D$Country == 'Estonia'])
load("~/GitHub/BSRS/.RData")
m(list = ls())
# Get important libraries
library(tools)
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(gdata)
library(corrgram)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
#### Remove graphs and tables before running analysis
WD <- getwd()
unlink(file.path(WD, 'tables', '*'))
unlink(file.path(WD, 'graphs', '*'))
#### Prepare analysis ####
# Run data analysis step by step
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
# Define analysis parameters
binWidth <- 3 # Binwidth for histograms
randomSeed <- 208
studyLoc <- c('Estonia', 'Finland')
### Analysis prepared, statistics follow
### Sasha recommends: GO LINE BY LINE INSIDE EACH OF THESE FILES!
# Nationality text parse
source('nationalityStats.R')
# Load analysis functions
source('analysisFunctions.R')
source('graphFunctions.R')
#### Perform Analysis ####
# Distribution of basic traits (separate Fins/Ests by colour)
source('basicTraits.R')
# Socio-economic
source('socioEconomic.R')
# Future orientedness (School for children)
source('futureOrientedness.R')
# Nationality
source('nationality.R')
# Satisfaction/Happiness
source('satisfaction.R')
# Integration
source('integration.R')
# Step models to determine what affects nationality
intFactor = 'NationalityScore'
source('forwardBackModel.R')
source('Extra_Analysis.R')
##########################
# TO-DO...!
#########################
# Collate .tex files into single Appendix
# Remove as.numeric from .tex files & humanise strings within
# < Textual >
# 'Equality'
# 'WayOfLife'
# 'Integration'
# 'Democracy'
# 'StateLanguage_Satisfaction'
load("~/GitHub/BSRS/.RData")
load("~/GitHub/BSRS/.RData")
library(car)
library(ggplot2)
library(reshape2)
source("graphFunctions.R")
rm(list = ls())
# Get important libraries
library(tools)
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(gdata)
library(corrgram)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
#### Remove graphs and tables before running analysis
WD <- getwd()
unlink(file.path(WD, 'tables', '*'))
unlink(file.path(WD, 'graphs', '*'))
#### Prepare analysis ####
# Run data analysis step by step
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
# Define analysis parameters
binWidth <- 3 # Binwidth for histograms
randomSeed <- 208
studyLoc <- c('Estonia', 'Finland')
### Analysis prepared, statistics follow
### Sasha recommends: GO LINE BY LINE INSIDE EACH OF THESE FILES!
# Nationality text parse
source('nationalityStats.R')
# Load analysis functions
source('analysisFunctions.R')
source('graphFunctions.R')
#### Perform Analysis ####
# Distribution of basic traits (separate Fins/Ests by colour)
source('basicTraits.R')
# Socio-economic
source('socioEconomic.R')
# Future orientedness (School for children)
source('futureOrientedness.R')
# Nationality
source('nationality.R')
# Satisfaction/Happiness
source('satisfaction.R')
# Integration
source('integration.R')
# Step models to determine what affects nationality
intFactor = 'NationalityScore'
source('forwardBackModel.R')
source('Extra_Analysis.R')
##########################
# TO-DO...!
#########################
# Collate .tex files into single Appendix
# Remove as.numeric from .tex files & humanise strings within
# < Textual >
# 'Equality'
# 'WayOfLife'
# 'Integration'
# 'Democracy'
# 'StateLanguage_Satisfaction'
library(car)
library(ggplot2)
library(reshape2)
source("graphFunctions.R")
load("~/GitHub/BSRS/.RData")
model <- lm(NationalityScore ~ IncomePersonal * Country, data=D)
Anova(model, type='II')
cor.test(D$NationalityScore, D$IncomePersonal)
scatterPlotMulti(D, "IncomePersonal", "NationalityScore", "Country",
fileName=paste("Income-vs-Nationality.png"),
graphTitle=("Income vs Nat. Score"))
library(car)
library(ggplot2)
library(reshape2)
source("graphFunctions.R")
manova_plot <- function(data, col_names, prefix){
fit <- manova(as.matrix(D[, col_names]) ~ Country, data=D)
print(summary(fit))
for (col in col_names){
print(col)
fit <-t.test(D[D['Country']=='Estonia', col], D[D['Country']=='Finland', col])
#print(fit)
if (fit$p.value < (0.05 / length(col_names))){
cat("\t*** Significant! ***", "(p-value: ", fit$p.value, "; t-value: ", fit$statistic, "; df: ", fit$parameter, ")", "\n")
}
cat("\n")
}
D_subset <- D[, c(col_names, 'Country')]
names(D_subset) <- sub(prefix, "", names(D_subset))
D_subset_m <- melt(D_subset, id.vars = 'Country')
p <- barMulti(D_subset_m, 'variable', 'value', fillCol='Country',
graphTitle=paste(gsub("_", "", prefix), "by Country"),
fileName=paste(prefix, "_Country__MANOVA.png", sep=""))
}
model <- lm(NationalityScore ~ IncomePersonal * Country, data=D)
Anova(model, type='II')
cor.test(D$NationalityScore, D$IncomePersonal)
scatterPlotMulti(D, "IncomePersonal", "NationalityScore", "Country",
fileName=paste("Income-vs-Nationality.png"),
graphTitle=("Income vs Nat. Score"))
model <- lm(NationalityScore ~ Working * Country, data=D)
Anova(model)
barMulti(dataFrame=D, 'Working', 'NationalityScore', 'Country',
fileName="Hist_Working-vs-NatScore.png",
graphTitle = "Nat. Score by Employment")
rm(list = ls())
# Get important libraries
library(tools)
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(gdata)
library(corrgram)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
#### Remove graphs and tables before running analysis
WD <- getwd()
unlink(file.path(WD, 'tables', '*'))
unlink(file.path(WD, 'graphs', '*'))
#### Prepare analysis ####
# Run data analysis step by step
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
# Define analysis parameters
binWidth <- 3 # Binwidth for histograms
randomSeed <- 208
studyLoc <- c('Estonia', 'Finland')
### Analysis prepared, statistics follow
### Sasha recommends: GO LINE BY LINE INSIDE EACH OF THESE FILES!
# Nationality text parse
source('nationalityStats.R')
# Load analysis functions
source('analysisFunctions.R')
source('graphFunctions.R')
#### Perform Analysis ####
# Distribution of basic traits (separate Fins/Ests by colour)
source('basicTraits.R')
# Socio-economic
source('socioEconomic.R')
# Future orientedness (School for children)
source('futureOrientedness.R')
# Nationality
source('nationality.R')
# Satisfaction/Happiness
source('satisfaction.R')
# Integration
source('integration.R')
# Step models to determine what affects nationality
intFactor = 'NationalityScore'
source('forwardBackModel.R')
source('Extra_Analysis.R')
##########################
# TO-DO...!
#########################
# Collate .tex files into single Appendix
# Remove as.numeric from .tex files & humanise strings within
# < Textual >
# 'Equality'
# 'WayOfLife'
# 'Integration'
# 'Democracy'
# 'StateLanguage_Satisfaction'
model <- lm(NationalityScore ~ Working * Country, data=D)
Anova(model)
barMulti(dataFrame=D, 'Working', 'NationalityScore', 'Country',
fileName="Hist_Working-vs-NatScore.png",
graphTitle = "Nat. Score by Employment")
# Type of data in each column
D_class <- sapply(D, class)
# Get only quantitative columns
D_numeric <- sapply(D, is.numeric)
Dq <- D[, D_numeric]
Dq_sum <- data.frame(names(Dq),
sapply(Dq, mean, na.rm = TRUE),
sapply(Dq, sd, na.rm = TRUE));
names(Dq_sum) <- c('Question', 'mean', 'std')
row.names(Dq_sum) <- NULL
# Sub-summaries
D_nat <- Dq_sum[grepl('Nat_', Dq_sum$Question), ]
D_lang <- Dq_sum[grepl('Language_', Dq_sum$Question), ] # Except StateLanguage
D_sLang <- Dq_sum[grepl('StateLanguage_', Dq_sum$Question), ]
D_cSchool <- Dq_sum[grepl('ChildSchool_', Dq_sum$Question), ] # Incorrect statistic!
D_inc <- Dq_sum[grepl('Income_', Dq_sum$Question), ]
D_sat <- Dq_sum[grepl('Satisfaction_', Dq_sum$Question), ]
D_agree <- Dq_sum[grepl('Agree_', Dq_sum$Question), ]
D_import <- Dq_sum[grepl('ImportanceState_', Dq_sum$Question), ]
D_eqOpp <- Dq_sum[grepl('EqualOpp_', Dq_sum$Question), ]
# Get only qualitative columns
D_qual <- sapply(D, is.character)
Dc <- D[, D_qual]
# Convert to integers
for (q in toInteger) {
D[[q]] <- as.integer(D[[q]])
}
# Invert data where scales in wrong direction
for (q in invertValues) {
D[[q]] <- 5 - D[[q]]
}
# Clean 5s
for (q in clean5s) {
D[[q]][D[[q]]==5] <- NA
}
# Clean True/False
for (q in cleanTrue) {
D[[q]] <- as.logical(D[[q]])
D[[q]][is.na(D[[q]])] <- FALSE
}
for (q in toFactor) {
D[[q]] <- as.factor(D[[q]])
}
# Reason For Moving 4s to NAs
D[['ReasonForMoving']][D[['ReasonForMoving']]==4] <- NA
# Satisfaction 11s to NAs
D[['Satisfaction']][D[['Satisfaction']]==11] <- NA
#### Index from Nat_factors (1-4 scale) ---> 1-10 scale
minMax_Q = c(1, 4)
nQs = length(nat_Factors)
D$NationalityScore <- (rowSums(D[, nat_Factors], na.rm=T) - nQs * minMax_Q[1]) /
((minMax_Q[2] - minMax_Q[1]) * nQs) * 10
D$NationalityScore[D$NationalityScore < 0] <- NA
D$NationalityScore_Affir <- rowMeans(D[, natAff_Factors], na.rm=T)
D$NationalityScore_ID <- rowMeans(D[, natID_Factors], na.rm=T)
#### Languages ####
# All languages
langLevels <- c("Not at all", "Understand, don't speak", "Understand & speak a little", "Understand, speak & write", "Fluent")
levels(D$LanguageFinnish) <- langLevels
levels(D$LanguageEstonian) <- langLevels
levels(D$LanguageSwedish) <- langLevels
levels(D$LanguageEnglish) <- langLevels
levels(D$LanguageGerman) <- langLevels
# State language skills (already inverted above)
stalangLevels <- c("Not at all", "Little", "Average", "Good")
levels(D$StateLanguageListen) <- stalangLevels
levels(D$StateLanguageRead) <- stalangLevels
levels(D$StateLanguageSpeak) <- stalangLevels
levels(D$StateLanguageWrite) <- stalangLevels
#### Income ####
# Income level, invert, as "1" is high in spreadsheet, but should be "low"
D$IncomeLevel <- as.factor(4 - D$IncomeLevel)
levels(D$IncomeLevel) <- c("Low", "Medium", "High")
# Income assessment, invet values, as "1" is good, "4" is bad
D$IncomeAssessment <- as.factor(5 - D$IncomeAssessment)
levels(D$IncomeAssessment) <- c("Very difficult", "Difficult", "Managing", "Living well")
D$IncomeAssessmentScale <- as.numeric(D$IncomeAssessment)
# Income future (6s to NAs()
D[D$IncomeFuture==6 & !is.na(D$IncomeFuture), 'IncomeFuture'] <- NA
D$IncomeFuture <- as.factor(6 - D$IncomeFuture)
levels(D$IncomeFuture) <- c("Much worse", "Somewhat worse", "About the same", "Somewhat better", "Much better")
# Income personal
# Is not a factor, it should be replaced by actual numbers depending on country
D$IncomeFactor <- D$IncomePersonal
D[D$Country=="Finland", "IncomeFactor"] <- D[D$Country=="Finland", "IncomeFactor"] + 1
D$IncomeFactor <- as.factor(D$IncomeFactor)
levels(D$IncomeFactor) <- c("200-500", "500-1000", "1000-1500", "1500-2000", "2000-2500", "2500-3000", "3000+")
y <- list(350, 750, 1250, 1750, 2250) # Estonian incomes
D[D$Country=="Estonia" & !is.na(D$IncomePersonal), "IncomePersonal"] <- unlist(y[subset(D, Country=="Estonia")$IncomePersonal])
y <- list(750, 1250, 1750, 2250, 2750, 3250) # Finnish incomes
D[D$Country=="Finland" & !is.na(D$IncomePersonal), "IncomePersonal"] <- unlist(y[subset(D, Country=="Finland")$IncomePersonal])
#### Occupation ####
levels(D$Occupation) <- c("Employee", "Employer", "Entrepreneur", "Pensioner (working)", "Student (working)",
"Pensioner (unemployed)", "Student (unemployed)", "Unemployed (no benefits)",
"Unemployed (benefits)", "Housewife", "Other")
D$Studying <- FALSE
D[as.numeric(D$Occupation) %in% c(5, 7), 'Studying'] <- TRUE
D$Working <- "Working"
D[as.numeric(D$Occupation) %in% c(1, 2, 3, 4, 5), 'Working'] <- "Unemployed"
D$Benefits <- FALSE
D[as.numeric(D$Occupation) %in% c(9), 'Benefits'] <- TRUE
#### Other ####
levels(D$Gender) <- c("Male", "Female")
levels(D$FamilyStatus) <- c("Single", "Married", "Cohabiting", "Dating", "Divorced", "Widowed")
D[["ReasonForMoving"]][is.na(D[['ReasonForMoving']]) & D[['ReasonForMoving_Other']]!=''] = 4
D$ReasonForMoving <- as.factor(D$ReasonForMoving)
levels(D$ReasonForMoving) <- c("Work", "Study", "Family", "Other")
levels(D$NativeLanguage) <- c("Russian", "State", "Other", "Undefined")
D[is.na(D$NativeLanguage), 'NativeLanguage'] <- 'Undefined'
levels(D$Religion) <- c("Orthodox", "Catholic", "Protestant", "Lutheran", "Islam", "Buddhism/oriental",
"Hinduism", "Atheism", "Other")
levels(D$Education) <- c("Basic", "Vocational", "Polytechnic", "School", "Degree", "Other")
model <- lm(NationalityScore ~ Working * Country, data=D)
Anova(model)
barMulti(dataFrame=D, 'Working', 'NationalityScore', 'Country',
fileName="Hist_Working-vs-NatScore.png",
graphTitle = "Nat. Score by Employment")
load("~/GitHub/BSRS/.RData")
library(tools)
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(gdata)
library(corrgram)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
installXLSXsupport(perl='C:\\Perl64\\bin\\perl.exe', verbose=TRUE)
setwd('C:/Users/Admin/Documents/GitHub/BSRS/')
WD <- getwd()
unlink(file.path(WD, 'tables', '*'))
unlink(file.path(WD, 'graphs', '*'))
binWidth <- 3 # Binwidth for histograms
randomSeed <- 208
studyLoc <- c('Estonia', 'Finland')
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
source('nationalityStats.R')
source('analysisFunctions.R')
source('graphFunctions.R')
source('basicTraits.R')
source('socioEconomic.R')
source('futureOrientedness.R')
source('nationality.R')
source('satisfaction.R')
source('integration.R')
intFactor = 'NationalityScore'
source('forwardBackModel.R')
source('Extra_Analysis.R')
decisionTree(dataFrame     = D,
intFactor     = 'NationalityScore',
choiceFactors = c(sat_Factors),
fileName      = 'decTree__NationalityScore-Factors.png',
graphTitle    = "Nationality Score by Satisfaction",
rpartMethod   = "anova",
cleanNames    = FALSE)
decisionTree(dataFrame     = D,
intFactor     = 'NationalityScore',
choiceFactors = c(sat_Factors),
fileName      = 'decTree__NationalityScore-Factors.png',
graphTitle    = "Ethnic Identity Score by Satisfaction",
rpartMethod   = "anova",
cleanNames    = FALSE)
# Age vs. NationalityScore
fit <- lm(formula = 'Age ~ NationalityScore', data = Dloc)
print(summary(fit))
tableName <- paste('Interrelation between Age and the Nationality Score', l, sep='_')
lt <- latexTable(fit, tableName)
fit <- lm(formula = 'Age ~ NationalityScore', data = Dloc)
print(summary(fit))
tableName <- paste('Interrelation between Age and the Nationality Score', l, sep='_')
lt <- latexTable(fit, tableName)
}
fit <- lm(formula = 'Age ~ NationalityScore', data = Dloc)
print(summary(fit))
tableName <- paste('Interrelation between Age and the Nationality Score', l, sep='_')
lt <- latexTable(fit, tableName)
for (l in studyLoc) {
Dloc <- subset(D, Country == l)
# Age vs. TimeInCountry
fit <- lm(formula = 'Age ~ TimeInCountry', data = Dloc)
print(summary(fit))
tableName <- paste('age_TIC', l, sep='_')
lt <- latexTable(fit, tableName)
# Age vs. NationalityScore
fit <- lm(formula = 'Age ~ NationalityScore', data = Dloc)
print(summary(fit))
tableName <- paste('Interrelation between Age and the Nationality Score', l, sep='_')
lt <- latexTable(fit, tableName)
}
latexTable <- function(fit, fileName, myTitle) {
latexfile <- file.path(WD, 'tables', paste(fileName, '.tex', sep=''))
fitTbl <- stargazer(fit, title = myTitle)
fitTbl <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
setwd(file.path(WD, 'tables'))
texi2dvi(file = latexfile, clean = TRUE)
setwd(WD)
}
latexTable <- function(fit, fileName, myTitle) {
latexfile <- file.path(WD, 'tables', paste(fileName, '.tex', sep=''))
fitTbl <- stargazer(fit, title = myTitle)
fitTbl <- c('\\documentclass{article}', '\\begin{document}', fitTbl, '\\end{document}')
write(fitTbl, file=latexfile)
setwd(file.path(WD, 'tables'))
texi2dvi(file = latexfile, clean = TRUE)
setwd(WD)
}
for (l in studyLoc) {
Dloc <- subset(D, Country == l)
# Age vs. TimeInCountry
fit <- lm(formula = 'Age ~ TimeInCountry', data = Dloc)
print(summary(fit))
fileName <- paste('age_TIC', l, sep='_')
lt <- latexTable(fit,
fileName,
myTitle = "Interrelation between Age and Time in Country")
# Age vs. NationalityScore
fit <- lm(formula = 'Age ~ NationalityScore', data = Dloc)
print(summary(fit))
fileName <- paste('age_NationalityScore', l, sep='_')
lt <- latexTable(fit,
fileName,
myTitle = "Interrelation between Age and the Nationality Score")
}
scatterPlotMulti(D,
xCol = 'Age',
yCol = 'NationalityScore',
fillCol = 'Country',
fileName = 'age-vs-Nationality.png',
graphTitle = 'Interrelation between Age and Nationality Score')
