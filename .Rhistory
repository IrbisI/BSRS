if (class(D_forest2[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest2[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest2[col], fun=get_mode)
}
}
# Cleaned data
missmap(D_forest)
fit <- randomForest(Country ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
fit <- randomForest(Country ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
missmap(D_forest)
View(D_forest)
drops <- c(
"ImportanceState_Other",
q_language,
"Language_Other",
"Language_Other_Name",
"StateLanguage_Other",
"NativeLanguage",
"NativeLanguage_Other",
"ReasonForMoving",
"ReasonForMoving_Other",
"Nationality_Self",
"Nationality_Mother",
"Nationality_Father",
"PlaceBirth",
"Time")
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
fit <- randomForest(Country ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
View(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest2)){
if (class(D_forest2[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest2[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest2[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
fit <- randomForest(Country ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
library(Amelia)
library(Hmisc)
library(randomForest)
set.seed(810)
get_mode <- function(x){
names(sort(-table(x)))[1]
}
D_forest <- D
drops <- c(
"count",
"Time",
"ImportanceState_Other",
q_language,
"Language_Other",
"Language_Other_Name",
"StateLanguage_Other",
"StateLanguage_Satisfaction",
"NativeLanguage",
"NativeLanguage_Other",
"Religion_Other",
"Education_Other",
"Occupation_Other",
"Equality",
"WayOfLife",
"Integration",
"Democracy",
"Emigration",
"Emigration_2",
"ReasonForMoving",
"ReasonForMoving_Other",
"Nationality_Self",
"Nationality_Mother",
"Nationality_Father",
"PlaceBirth")
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest2)){
if (class(D_forest2[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest2[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest2[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
for(col in names(D_forest)){
if (class(D_forest2[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest2[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest2[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
D_forest <- D
drops <- c(
"count",
"Time",
"ImportanceState_Other",
"Language_Other",
q_language,
"Language_Other_Name",
"StateLanguage_Other",
"StateLanguage_Satisfaction",
"NativeLanguage",
"NativeLanguage_Other",
"Religion_Other",
"Education_Other",
"Occupation_Other",
"Equality",
"WayOfLife",
"Integration",
"Democracy",
"Emigration",
"Emigration_2",
"ReasonForMoving",
"ReasonForMoving_Other",
"Nationality_Self",
"Nationality_Mother",
"Nationality_Father",
"PlaceBirth")
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest)){
if (class(D_forest2[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest2[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest2[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest2[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest2[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
missmap(D_forest)
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest2[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest2[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
D_forest <- D
drops <- c(
"count",
"Time",
"ImportanceState_Other",
q_language,
"Language_Other",
"Language_Other_Name",
"StateLanguage_Other",
"StateLanguage_Satisfaction",
"NativeLanguage",
"NativeLanguage_Other",
"Religion_Other",
"Education_Other",
"Occupation_Other",
"Equality",
"WayOfLife",
"Integration",
"Emigration",
"Democracy",
"Emigration_2",
"ReasonForMoving",
"ReasonForMoving_Other",
"Nationality_Self",
"Nationality_Mother",
"Nationality_Father",
"PlaceBirth")
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
)
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest[col], fun=get_mode)
} else if (class(D_forests[[col]] == 'character')){
D_forest <- D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest[col], fun=get_mode)
} else if (class(D_forest[[col]] == 'character')){
D_forest <- D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest[col], fun=get_mode)
} else if (class(D_forest[[col]]) == 'character'){
D_forest <- D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
col
(names(D_forest) == col)
View(D)
View(D)
rm(list = ls())
# Get important libraries
library(tools)
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(gdata)
library(corrgram)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
#### Remove graphs and tables before running analysis
WD <- getwd()
unlink(file.path(WD, 'tables', '*'))
unlink(file.path(WD, 'graphs', '*'))
#### Prepare analysis ####
# Run data analysis step by step
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
# Define analysis parameters
binWidth <- 3 # Binwidth for histograms
randomSeed <- 208
studyLoc <- c('Estonia', 'Finland')
### Analysis prepared, statistics follow
### Sasha recommends: GO LINE BY LINE INSIDE EACH OF THESE FILES!
# Nationality text parse
View(D)
rm(list = ls())
# Get important libraries
library(tools)
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(gdata)
library(corrgram)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
#### Remove graphs and tables before running analysis
WD <- getwd()
unlink(file.path(WD, 'tables', '*'))
unlink(file.path(WD, 'graphs', '*'))
#### Prepare analysis ####
# Run data analysis step by step
source('SurveyQuestions.R')
source('QuestionGroups.R')
source('ReadData.R')
source('BasicClean.R')
source('SimpleStats.R')
View(D)
D <- read.xls(file.path(WD, "docs", "Responses.full.xlsx"), sheet = 1, header = FALSE, stringsAsFactors=FALSE)
colnames(D) <- surveyQuestions
# Remove useless rows
D <- D[-c(1:14),]
View(D)
D <- D[, -c(-1)]
D <- read.xls(file.path(WD, "docs", "Responses.full.xlsx"), sheet = 1, header = FALSE, stringsAsFactors=FALSE)
colnames(D) <- surveyQuestions
# Remove useless rows
D <- D[-c(1:14),]
D <- D[, -c(ncol(D))]
View(D)
rm(list = ls())
library(tools)
# Get important libraries
library(car)
library(ggplot2)     # Grammar of Graphics
library(ggbiplot)
library(colorspace)
library(gcookbook)
library(corrgram)
library(gdata)
library(stargazer)
library(rattle)
library(randomForest)
library(inTrees)
library(rpart.plot)
library(RColorBrewer)
#### Remove graphs and tables before running analysis
WD <- getwd()
unlink(file.path(WD, 'tables', '*'))
unlink(file.path(WD, 'graphs', '*'))
#### Prepare analysis ####
# Run data analysis step by step
source('SurveyQuestions.R')
source('ReadData.R')
source('BasicClean.R')
source('QuestionGroups.R')
source('SimpleStats.R')
library(Amelia)
library(Hmisc)
library(randomForest)
set.seed(810)
get_mode <- function(x){
names(sort(-table(x)))[1]
}
D_forest <- D
drops <- c(
"Time",
"count",
"ImportanceState_Other",
q_language,
"Language_Other",
"Language_Other_Name",
"StateLanguage_Other",
"StateLanguage_Satisfaction",
"NativeLanguage",
"NativeLanguage_Other",
"Religion_Other",
"Education_Other",
"Occupation_Other",
"Equality",
"WayOfLife",
"Integration",
"Democracy",
"Emigration",
"Emigration_2",
"ReasonForMoving",
"ReasonForMoving_Other",
"Nationality_Self",
"Nationality_Mother",
"Nationality_Father",
"PlaceBirth")
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest)){
D_forest[col] <- impute(D_forest[col], fun=median)
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest[col], fun=get_mode)
} else if (class(D_forest[[col]]) == 'character'){
D_forest <- D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
fit <- randomForest(Country ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest[col], fun=get_mode)
} else if (class(D_forest[[col]]) == 'character'){
D_forest <- D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
fit <- randomForest(Country ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
set.seed(810)
get_mode <- function(x){
names(sort(-table(x)))[1]
}
D_forest <- D
drops <- c(
"count",
"Time",
"ImportanceState_Other",
q_language,
"Language_Other",
"Language_Other_Name",
"StateLanguage_Other",
"StateLanguage_Satisfaction",
"NativeLanguage",
"NativeLanguage_Other",
"Religion_Other",
"Education_Other",
"Occupation_Other",
"Equality",
"WayOfLife",
"Integration",
"Democracy",
"Emigration",
"Emigration_2",
"ReasonForMoving",
"ReasonForMoving_Other",
"Nationality_Self",
"Nationality_Mother",
"Nationality_Father",
"PlaceBirth",
"TimeInCountry", # Banal
"Age" # Banal
)
D_forest <- D_forest[ , !(names(D_forest) %in% drops)]
missmap(D_forest)
# Set median for numeric, mode for factors in missing values
for(col in names(D_forest)){
if (class(D_forest[[col]]) %in% c('numeric', 'integer') ) {
D_forest[col] <- impute(D_forest[col], fun=median)
} else if (class(D_forest[[col]]) == 'factor') {
D_forest[col] <- impute(D_forest[col], fun=get_mode)
} else if (class(D_forest[[col]]) == 'character'){
D_forest <- D_forest[ , !(names(D_forest) == col)]
}
}
# Cleaned data
missmap(D_forest)
fit <- randomForest(Country ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
source('~/GitHub/BSRS/MachineLearn.R')
fit <- randomForest(Gender ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
fit <- randomForest(Satisfaction ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
fit <- randomForest(NationalityScore ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
fit <- randomForest(NatScore ~ . ,
data=D_forest,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
View(D_forest)
